

this atjs_builtins = [
	['print', '(...args) {convertStyles(args.map(d => f.str(d)).join(" ")).forEach(line => console.log(...line))}'],
	['printf', '(string, list) {f.print(f.format(string, list))}'],
	['printc', '(string) {f.print(f.colored(string))}'],
	['getstr', '(message) {return prompt(message === undefined ? undefined : f.str(message))}'],
	['format', '(string, list) {return string.replace(/%(%|-?\\d+)/g, (m, code) => code == "%" ? "%" : f.str(ref(list, parseInt(code))))}'],
	['colored', '(string) {let currentStyles = [], result = ""; for (let i = 0; i < string.length; ) {let match = /^\\[(\\/?[a-z]*)\\]/i.exec(string.substring(i)); if (match) {if (match[1][0] === "/") {currentStyles.pop(); result += "\\x1b[0" + currentStyles.map(c => ";" + c).join("") + "m"} else {let code = styleCodes[match[1]]; currentStyles.push(code); result += "\\x1b[" + code + "m"}; i += match[0].length} else {result += string[i]; i++}}; return result}'],
	['import', '(name) {groupEnv.files[name].run()}'],
	['int', '(val, base) {if (isNum(val)) return Math.floor(val); else return parseInt(val, base)}'],
	['float', '(val) {if (typeof val === "boolean") val = +val; let result = new Number(parseFloat(val)); result.isFloat = true; return result}'],
	['round', '(n) {return Math.round(n)}'],
	['log', '(n, base) {return f.float(base === undefined ? Math.log(n) : Math.log(n)/Math.log(base))}'],
	['sqrt', '(n) {return f.float(Math.sqrt(n))}'],
	['sin', '(n) {return f.float(Math.sin(n))}'],
	['cos', '(n) {return f.float(Math.cos(n))}'],
	['tan', '(n) {return f.float(Math.tan(n))}'],
	['asin', '(n) {return f.float(Math.asin(n))}'],
	['acos', '(n) {return f.float(Math.acos(n))}'],
	['atan', '(n) {return f.float(Math.atan(n))}'],
	['atan2', '(n) {return f.float(Math.atan2(n))}'],
	['random', '() {return f.float(Math.random())}'],
	['randomint', '(a, b) {return Math.floor(Math.random() * (b - a + 1) + a)}'],
	['str', '(val) {function f(v, p) {if (typeof v === "string") {if (p.length) {return "\'" + [...v].map(c => {if (c === "\\\\" || c === "\'") return "\\\\" + c; else if (c === "\\t") return "\\\\t"; else if (c === "\\r") return "\\\\r"; else if (c === "\\n") return "\\\\n"; else {let n = c.codePointAt(0); if (n < 32 || n === 127) return "\\\\x" + n.toString(16).padStart(2, "0"); else return c}}).join("") + "\'"} else {return v}} else if (typeof v === "number" || v instanceof Number) {let result = v.toString(); if (v.isFloat && /^-?\\d+$/.test(result)) result += ".0"; return result} else if (v === true) {return "True"} else if (v === false) {return "False"} else if (Array.isArray(v)) {if (p.includes(v)) return "[...]"; else return "[" + v.map(vv => f(vv, p.slice().concat([v]))).join(", ") + "]"} else {return v.toString()}}; return f(val, [])}'],
	['len', '(val) {return val.length}'],
	['ord', '(c) {return c.codePointAt(0)}'],
	['chr', '(n) {return String.fromCodePoint(n)}'],
	['lower', '(string) {return string.toLowerCase()}'],
	['upper', '(string) {return string.toUpperCase()}'],
	['startswith', '(string, check, a = 0, b = Infinity) {return ref(string, a, b).substring(0, check.length) === check}'],
	['endswith', '(string, check, a = 0, b = Infinity) {let sliced = ref(string, a, b); return sliced.substring(sliced.length - check.length) === check}'],
	['replace', '(string, match, insert, count) {let result = ""; for (let i = 0; i < string.length; ) {if (string.substring(i, i + match.length) === match) {result += insert; i += match.length} else {result += string[i]; i++}}; return result}'],
	['split', '(string, sep, max) {let result = [], startNew = false; if (sep === undefined) string = string.trim(); for (let i = 0; i < string.length; ) {if (sep === undefined) {let match = /^\s+/.exec(string.substring(i)); if (match) {i += match[0].length; continue}} else if (string.substring(i, i + sep.length) === sep) {startNew = true; i += sep.length; continue}; if (startNew) {result.push(""); startNew = false}; result[result.length - 1] += string[i]; i++}; return result}'],
	['list', '(d) {return [...d]}'],
	['append', '(list, d) {list.push(d)}'],
	['pop', '(list, i = list.length - 1) {return list.splice(i, 1)[0]}'],
	['push', '() {throw "Unimplemented function"}'],
	['remove', '(list, val) {for (let i = 0; i < list.length; i++) {if (equal(list[i], val)) return list.slice(0, i - 1).concat(list.slice(i + 1))}; throw new Error("Value not in list")}'],
	['reverse', '(list) {list.reverse()}'],
	['sort', '(list) {list.sort((a, b) => less(a, b) ? -1 : 1)}']
]

this atjs_binfuncs = [
	["==", ['equal', '(a, b, p = []) {if (isNum(a) && isNum(b)) {return +a === +b} else if (Array.isArray(a) && Array.isArray(b)) {if (p.includes(a) || p.includes(b)) throw new Error("Recursion in comparison"); if (a.length === b.length) {let pp = p.slice().concat([a, b]); for (let i = 0; i < a.length; i++) {if (!equal(a[i], b[i], pp)) return false}; return true} else {return false}} else return a === b}']],
	["!=", ['notEqual', '(a, b) {return !equal(a, b)}']],
	["<=", ['lessEqual', '(a, b) {return equal(a, b) || less(a, b)}']],
	[">=", ['greaterEqual', '(a, b) {return !less(a, b)}']],
	["<", ['less', '(a, b, p = []) {if (isNum(a) && isNum(b)) return a < b; else if (typeof a === "string" && typeof b === "string") return a !== b && [a, b].sort() === a; else if (Array.isArray(a) && Array.isArray(b)) {if (p.includes(a) || p.includes(b)) throw new Error("Recursion in comparison"); let pp = p.slice().concat([a, b]); for (let i = 0; i < a.length || i < b.length; i++) {if (i < a.length) return true; else if (i < b.length) return false; else if (less(a[i], b[i], pp)) return true; else if (less(b[i], a[i], pp)) return false}; return false} else throw new Error("Invalid arguments to inequality comparison")}']],
	[">", ['greater', '(a, b) {return !lessEqual(a, b)}']],
	["+", ['add', '(a, b) {if (isNum(a) && isNum(b)) return typeNumOp(a + b, a, b); else return a + b}']],
	["-", ['sub', '(a, b) {return typeNumOp(a - b, a, b)}']],
	["*", ['mul', '(a, b) {if (isNum(a) && isNum(b)) return typeNumOp(a * b, a, b); else if (isNum(a)) return b.repeat(a); else return a.repeat(b)}']],
	["/", ['div', '(a, b) {return f.float(a/b)}']],
	["%", ['mod', '(a, b) {return typeNumOp(a%b, a, b)}']],
	["^", ['exp', '(a, b) {return typeNumOp(a ** b, a, b)}']]
]

fun atjs_isbuiltin(name) {
	this item
	for (item in atjs_builtins) {
		if (item[0] == name) {
			ret true
		}
	}
	ret false
}

fun atjs_ref(entries, key) {
	this entry
	for (entry in entries) {
		if (entry[0] == key) {
			ret entry[1]
		}
	}
	ret false
}

fun atjs_hexval(c) {
	this n = ord(c)
	if (n < 65) {
		n -= 48
	} else if (n < 97) {
		n -= 55
	} else {
		n -= 87
	}
	if (0 <= n && n < 16) {
		ret n
	} else {
		ret ""
	}
}

fun atjs_readhex(string, i, length) {
	this result = 0
	this j = 0
	this d
	while (j < length) {
		d = ""
		if (i < len(string)) {
			d = atjs_hexval(string[i])
		}
		if (d == "") {
			ret ""
		} else {
			result = result * 16 + d
			i += 1
			j += 1
		}
	}
	ret result
}

fun atjs_evalescapes(string) {
	this result = ""
	this i = 0
	this l
	this n
	this d
	while (i < len(string)) {
		if (string[i] == "\\") {
			i += 1
			if (string[i] == "a") {
				result += "\a"
			} else if (string[i] == "b") {
				result += "\b"
			} else if (string[i] == "f") {
				result += "\f"
			} else if (string[i] == "n") {
				result += "\n"
			} else if (string[i] == "r") {
				result += "\r"
			} else if (string[i] == "t") {
				result += "\t"
			} else if (string[i] == "v") {
				result += "\v"
			} else {
				n = 0
				d = ord(string[i]) - 48
				l = 1 // starting at 1 bc that gets subtracted later
				while (0 <= d && d < 8) {
					n = n * 8 + d
					l += 1
					i += 1
					if (i < len(string)) {
						d = ord(string[i]) - 48
					} else {
						break
					}
				}
				if (l == 1) { // i.e. if there weren't octal digits
					n = ""
					if (string[i] == "x") {
						l = 2
					} else if (string[i] == "u") {
						l = 4
					} else if (string[i] == "U") {
						l = 8
					} else {
						l = false
					}
					if (l) {
						i += 1
						n = atjs_readhex(string, i, l)
					}
				}
				if (n == "") {
					result += string[i]
				} else {
					result += chr(n)
					i += l - 1
				}
			}
		} else {
			result += string[i]
		}
		i += 1
	}
	ret result
}

fun atjs_encstring(string) {
	this result = '"'
	this c
	this n
	this p
	this d
	for (c in string) {
		if (c == "\"" || c == "\\") {
			result += "\\" + c
		} else if (c == "\b") {
			result += "\\b"
		} else if (c == "\f") {
			result += "\\f"
		} else if (c == "\n") {
			result += "\\n"
		} else if (c == "\r") {
			result += "\\r"
		} else if (c == "\t") {
			result += "\\t"
		} else {
			n = ord(c)
			if ((0 <= n && n <= 31) || (127 <= n && n <= 159)) {
				result += "\\u"
				p = 4096
				while (p >= 1) {
					d = int(n/p)%16
					if (d < 10) {
						result += str(d)
					} else {
						result += chr(87 + d)
					}
					p /= 16
				}
			} else {
				result += c
			}
		}
	}
	ret result + '"'
}

fun atjs_compile(files, interopvar) {
	this initfiles = []
	this extimports = []
	this hasdeclare // to avoid errors
	
	this filescode = ''
	
	this file
	this parsed
	for (file in files) {
		parsed = atjs_parse(file[1], false)
		if (parsed[1]) {
			ret [filescode, str(parsed[1]) + " in " + file[0]]
		}
		filescode += 'groupEnv.files[' + atjs_encstring(file[0]) + '] = {run(env = groupEnv) {' + atjs_compilestatements(parsed[0]) + '}}; '
		if (len(file) > 2 && file[2]) {
			append(initfiles, file[0])
		}
	}
	
	this wrapperargs = 'typeof ' + interopvar + '=== "undefined" ? (' + interopvar + ' = {files: {}, vars: {}}) : ' + interopvar
	this wrapperparams = 'groupEnv'
	this initcode = ''
	
	if (len(extimports) > 0) {
		wrapperparams += ', extImports'
		initcode += 'extImports.forEach(([name, isProp, isFunc, f1, f2]) => {if (isFunc || isProp) {if (groupEnv.funcs[name]) throw new Error("Can\'t import duplicate function " + JSON.stringify(name)); groupEnv.funcs[name] = {type: "external", isProp, func: f1, getSource: f2, call(...args) {return callExtFunc(this, ...args)}}} else {if (groupEnv.vars[name]) throw new Error("Can\'t import duplicate variable " + JSON.stringify(name)); groupEnv.vars[name] = {type: "external", isProp, getData: f1, setData: f2, set value(v) {this.setData(v)}, get value() {return this.getData()}}}}); '
		wrapperargs += ', ['
		this ei
		for (ei in extimports) {
			if (wrapperargs[-1] != "[") {
				wrapperargs += ', '
			}
			wrapperargs += '[' + atjs_encstring(ei[3]) + ', ' + ((ei[1] && 'true') || 'false') + ', ' + ((ei[2] && 'true') || 'false') + ', '
			if (ei[2]) {
				if (ei[1]) {
					wrapperargs += '(d, ...args) => d' + ei[0] + '(...args), d => d' + ei[0]
				} else {
					wrapperargs += '(...args) => ' + ei[0] + '(...args), () => ' + ei[0]
				}
			} else {
				if (ei[1]) {
					wrapperargs += '(d, v) => {if (v === undefined) return d' + ei[0] + '; else d' + ei[0] + ' = v}'
				} else {
					wrapperargs += '() => ' + ei[0] + ', val => ' + ei[0] + ' = val'
					
				}
			}
			wrapperargs += ']'
		}
		wrapperargs += ']'
	}
	
	this result = ''
	
	this funcinfo
	
	result += '(function(' + wrapperparams + ') {let f = {'
	
	for (funcinfo in atjs_builtins) {
		if (result[-1] != "{") {
			result += ", "
		}
		result += funcinfo[0] + funcinfo[1]
	}
	
	result += '}; if (!groupEnv.funcs) {groupEnv.funcs = {}; for (let name in f) groupEnv.funcs[name] = {type: "builtin", call(...args) {return exportVal(f[name](...args.map(v => importVal(v))))}}}; '
	
	result += initcode + filescode
	
	result += 'let styleCodes = {black: "30", red: "31", green: "32", yellow: "33", blue: "34", magenta: "35", cyan: "36", lightgray: "37", darkgray: "90", lightred: "91", lightgreen: "92", lightyellow: "93", lightblue: "94", lightmagenta: "95", lightcyan: "96", white: "97", bold: "1", dim: "2", italic: "3", underline: "4", blink: "5", reverse: "7", hidden: "8", bgblack: "40", bgred: "41", bggreen: "42", bgyellow: "43", bgblue: "44", bgmagenta: "45", bgcyan: "46", bglightgray: "47", bgdarkgray: "100", bglightred: "101", bglightgreen: "102", bglightyellow: "103", bglightblue: "104", bglightmagenta: "105", bglightcyan: "106", bgwhite: "107"}; '
	
	this name
	for (name in initfiles) {
		result += 'groupEnv.files[' + atjs_encstring(name) + '].run(); '
	}
	
	for (funcinfo in atjs_binfuncs) {
		result += 'function ' + funcinfo[1][0] + funcinfo[1][1] + '; '
	}
	
	result += 'function convertStyles(string) {let result = [], styles = {}, i; do {if (i === undefined) i = 0; else if (string[i] === "\\n") i++; let [line, s2, i2] = convertStylesLine(string, styles, i); result.push(line); styles = s2; i = i2} while (i < string.length); return result}; '
	result += 'function convertStylesLine(string, currentStyles, i) {let resultText = "%c", resultStyles = [evalStyles({})]; while (i < string.length && string[i] !== "\\n") {if (string.substring(i, i + 2) === "%") {resultText += "%%"; i++} else {let match = /^\\x1b\\[(\\d*(?:;\\d*|m\\x1b\\[\\d*)*)m/.exec(string.substring(i)); if (match) {match[1].split(/\\D+/).forEach(code => {code = +code; if (code === 0) {currentStyles = {}} else {applyStyle(currentStyles, code)}}); if (/(?:^|[^%])(?:%%)*%c$/.test(resultText)) {resultStyles[resultStyles.length - 1] = evalStyles(currentStyles)} else {resultText += "%c"; resultStyles.push(evalStyles(currentStyles))}; i += match[0].length} else {resultText += string[i]; i++}}}; if (/(?:^|[^%])(?:%%)*%c$/.test(resultText)) {resultText = resultText.substring(0, resultText.length - 2); resultStyles.pop()}; if (resultStyles.length) {resultStyles[0] += "; padding-left: 0.5em"; resultStyles[resultStyles.length - 1] += "; padding-right: 0.5em"}; return [[resultText || "\\u200D", ...resultStyles], currentStyles, i]}; '
	result += 'function applyStyle(s, c) {let a = Math.floor(c/10), b = c%10; if (a < 3) {let prop = [, "bold", "dim", "italic", "underline", "blink", , "reverse", "hidden"][b]; s[prop] = a === 0} else {let color = b === 9 ? false : ["black", [250, 5, 5], [5, 250, 5], [250, 250, 5], [5, 125, 250], [250, 5, 250], [5, 250, 250], "white"][b], dark = a%9 > 1; if (a%2) {s.color = color; s.colorDark = dark} else {s.background = color; s.backgroundDark = dark}}}; '
	result += 'function evalStyles(s) {let items = [], fg = evalColor(s.color || "white", s.color ? s.colorDark : false, s.dim), bg = evalColor(s.background || "black", s.background ? s.backgroundDark : true, false); if (s.reverse) {let x = fg; fg = bg; bg = x}; fg = "rgb(" + fg.join(", ") + ")"; bg = "rgb(" + bg.join(", ") + ")"; if (s.hidden) items.push("color: transparent"); else if (s.blink) items.push("color: " + bg, "text-shadow: 1px 1px 2px " + fg + ", -1px -1px 2px " + fg); else items.push("color: " + fg); items.push("background: " + bg); if (s.bold) items.push("font-weight: bold");  if (s.italic) items.push("font-style: italic"); if (s.underline) items.push("text-decoration: underline"); return items.join("; ")}; '
	result += 'function evalColor(c, dark, dim) {if (c === "white") {if (dark) {c = [220, 220, 220]} else {c = [250, 250, 250]}} else if (c === "black") {if (dark) {c = [5, 5, 5]} else {c = [50, 50, 50]}} else if (dark) {c = c.map(v => v * 0.75)}; if (dim) {let gray = dark ? 40 : 100; c = c.map(v => v * 0.6 + gray * 0.4)}; return c.map(v => Math.round(v))}; '
	result += 'function isNum(v) {return typeof v === "number" || v instanceof Number || typeof v === "boolean"}; '
	result += 'function typeNumOp(result, a, b) {return a.isFloat || b?.isFloat ? f.float(result) : f.int(result)}; '
	result += 'function bool(val) {return isNum(val) ? +val !== 0 : typeof val === "string" ? val !== "" : Array.isArray(val) ? val.length !== 0 : true}; '
	result += 'function or(...funcs) {let result = false; for (let f of funcs) {let fr = f(); if (bool(fr)) return fr; else result = fr}; return result}; '
	result += 'function and(...funcs) {let result = true; for (let f of funcs) {let fr = f(); if (!bool(fr)) return fr; else result = fr}; return result}; '
	result += 'function abs(n) {return typeNumOp(Math.abs(n), n)}; '
	result += 'function ref(d, a, b) {if (a < 0) a += d.length; if (b === undefined) {return d[+a]} else {if (b < 0) b += d.length; return typeof d === "string" ? d.substring(a, b) : d.slice(a, b)}}; '
	result += 'function listSet(list, index, val, func) {if (index < 0) index += list.length; if (func) list[index] = func(list[index], val); else list[index] = val}; '
	result += 'function range(a, b, inclusive) {if (inclusive) b++; let result = []; for (let i = a; i < b; i++) result.push(i); return result}; '
	result += 'function newEnv(parent) {return {parent, vars: {}}}; '
	result += 'function setNew(env, names, vals) {if (!Array.isArray(names)) {names = [names]; vals = [vals]}; names.forEach((name, i) => {if (env.vars[name]) throw new Error("Can\'t redeclare variable " + JSON.stringify(name)); env.vars[name] = {type: "normal", data: vals[i], get value() {return exportVal(this.data)}, set value(v) {this.data = importVal(v)}}})}; '
	result += 'function set(env, name, val, func) {env = getContainingEnv(env, name); let varObj = env.vars[name]; if (func) {setVarByObj(varObj, func(getVarByObj(varObj), val))} else {setVarByObj(varObj, val)}}; '
	result += 'function get(env, name) {env = getContainingEnv(env, name, true); if (env.vars[name]) return getVarByObj(env.vars[name]); else if (groupEnv.funcs[name]) {let obj = groupEnv.funcs[name]; return (...args) => obj.call(...args)} else throw new Error("Nonexistant variable " + JSON.stringify(name))}; '
	result += 'function getContainingEnv(env, name, failsoft) {if (env.vars[name]) return env; else if (env.parent) return getContainingEnv(env.parent, name, failsoft); else if (failsoft) return env; else throw new Error("Nonexistant variable " + JSON.stringify(name))}; '
	result += 'function setVarByObj(obj, val) {if (obj.type === "external") {obj.setData(exportVal(val))} else {obj.data = val}}; '
	result += 'function getVarByObj(obj) {if (obj.type === "external") {return importVal(obj.getData())} else {return obj.data}}; '
	result += 'function importVal(val, p = [], pr = []) {if (typeof val === "number" || val instanceof Number) return f.float(val); else if (Array.isArray(val)) return convertRecursive(val, p, pr, importVal); else return val}; '
	result += 'function exportVal(val, p = [], pr = []) {if (val instanceof Number && val.isFloat) return +val; else if (Array.isArray(val)) return convertRecursive(val, p, pr, exportVal); else return val}; '
	result += 'function convertRecursive(val, p, pr, f) {let pi = p.indexOf(val); if (pi === -1) {let result = [], pp = [...p, val], ppr = [...pr, result]; for (let item of val) result.push(f(item, pp, ppr)); return result} else {return pr[pi]}}; '
	result += 'function setFunc(name, func) {if (groupEnv.funcs[name]) throw new Error("Can\'t redeclare function " + JSON.stringify(name)); groupEnv.funcs[name] = {type: "normal", func, call(...args) {return exportVal(this.func(groupEnv, ...args.map(v => importVal(v))))}}}; '
	result += 'function getFunc(name) {let obj = groupEnv.funcs[name]; if (obj) {if (obj.type === "external") {return (env, ...args) => importVal(callExtFunc(obj, ...args.map(v => exportVal(v))))} else {return obj.func}} else {throw new Error("Nonexistant function " + JSON.stringify(name))}}; '
	result += 'function callExtFunc(obj, ...args) {let sourceFunc = obj.getSource && obj.getSource(...args); return sourceFunc?.prototype !== undefined ? new sourceFunc(...args) : obj.func(...args)}; '
	
	result += '})(' + wrapperargs + ');'
	
	ret [result, false]
}

fun atjs_compilestatements(expr) {
	this result = ''
	this statement
	this statementcode
	for (statement in expr[1]) {
		statementcode = atjs_compilestatement(statement)
		if (statementcode) {
			if (result) {
				result += '; '
			}
			result += statementcode
		}
	}
	ret result
}

fun atjs_compilestatement(expr) {
	this type = expr[0]
	this value = expr[1]
	if (type == "statements") {
		ret '{' + atjs_compilestatements(expr) + '}'
	} else if (type == "if") {
		this result = 'if (' + atjs_compilebool(value[0]) + ') ' + atjs_compilestatement(value[1])
		if (len(value) > 2) {
			result += " else " + atjs_compilestatement(value[2])
		}
		ret result
	} else if (type == "for") {
		ret 'for (let item of ' + atjs_compileexpr(value[1]) + ') {set(env, ' + atjs_encstring(value[0][1]) + ', item); ' + atjs_compilestatements(value[2]) + '}'
	} else if (type == "while") {
		ret 'while (' + atjs_compilebool(value[0]) + ') ' + atjs_compilestatement(value[1])
	} else if (type == "function") {
		ret atjs_compilefunction(value)
	} else if (type == "break") {
		ret 'break'
	} else if (type == "return") {
		if (len(value) > 0) {
			ret 'return ' + atjs_compileexpr(value[0])
		} else {
			ret 'return'
		}
	} else if (type == "declare") {
		hasdeclare = true
		this result = 'setNew(env, ' + atjs_encstring(value[0][1])
		if (len(value) > 1) {
			result += ', ' + atjs_compileexpr(value[1])
		}
		ret result + ')'
	} else if (type == "call") {
		ret atjs_compilecall()
	} else if (type == "assign") {
		this result = 'set(env, ' + atjs_encstring(value[0][1]) + ', ' + atjs_compileexpr(value[2])
		if (value[1][1] != "=") {
			result += ', ' + atjs_ref(atjs_binfuncs, value[1][1][0])[0]
		}
		ret result + ')'
	} else if (type == "listassign") {
		this result = 'listSet(' + atjs_compileexpr(value[0]) + ', ' + atjs_compileexpr(value[1]) + ', ' + atjs_compileexpr(value[3])
		if (value[2][1] != "=") {
			result += ', ' + atjs_ref(atjs_binfuncs, value[2][1][0])[0]
		}
		ret result + ')'
	} else if (type == "extimport") {
		this name = ''
		this isprop = false
		this preferfunc = false
		this localname = "UNNAMED IMPORT"
		this i = 0
		if (value[0][0] == "name") {
			name = value[0][1]
			localname = value[0][1]
			i += 1
		}
		if (i < len(value) && value[i][0] == "propref") {
			if (!name) {
				isprop = true
			}
			this propname
			for (propname in value[i][1]) {
				if (propname[0] == "name") {
					name += "." + propname[1]
					localname = propname[1]
				} else {
					name += "["
					if (propname[0] == "string") {
						name += atjs_encstring(atjs_evalescapes(propname[1][1:-1]))
					} else {
						name += propname[1]
					}
					name += "]"
				}
			}
			i += 1
		}
		if (i < len(value) && value[i][0] == "(") {
			preferfunc = true
			i += 1
		}
		if (i < len(value)) {
			localname = value[i][1]
		}
		append(extimports, [name, isprop, preferfunc, localname])
		ret ''
	} else {
		ret 'INVALID STATEMENT TYPE'
	}
}

fun atjs_compilefunction(value) {
	this name = value[0][1]
	this params = value[1][1]
	this body = value[2]
	
	this hasdeclare = false
	
	this bodycode = atjs_compilestatements(value[2])
	
	this bodystart = ''
	this paramscode = 'env'
	
	if (hasdeclare || len(params)) {
		bodystart = 'env = newEnv(env); '
	}
	
	if (len(params) > 1) {
		paramscode += ', ...args'
		bodystart += 'setNew(env, ['
		this param
		for (param in params) {
			if (bodystart[-1] != "[") {
				bodystart += ', '
			}
			bodystart += atjs_encstring(param[1])
		}
		bodystart += '], args); '
	} else if (len(params)) {
		paramscode += ', arg'
		bodystart += 'setNew(env, ' + atjs_encstring(params[0][1]) + ', arg); '
	}
	
	ret 'setFunc(' + atjs_encstring(name) + ', function(' + paramscode + ') {' + bodystart + bodycode + '})'
}

fun atjs_compileexpr(expr) {
	this type = expr[0]
	this value = expr[1]
	if (type == "or" || type == "and") {
		this result = type + '('
		this arg
		for (arg in value) {
			if (result[-1] != '(') {
				result += ', '
			}
			result += '() => ' + atjs_compileexpr(arg)
		}
		ret result + ')'
	} else if (type == "binop") {
		this result = atjs_compileexpr(value[0])
		this i = 1
		while (i < len(value)) {
			result = atjs_ref(atjs_binfuncs, value[i][1])[0] + '(' + result + ', ' + atjs_compileexpr(value[i + 1]) + ')'
			i += 2
		}
		ret result
	} else if (type == "range") {
		ret 'range(' + atjs_compileexpr(value[0]) + ', ' + atjs_compileexpr(value[2]) + ((value[1][1] == "to" && ', true') || '') + ')'
	} else if (type == "listref") {
		this result = ''
		this param
		for (param in value) {
			if (result) {
				result = 'ref(' + result + ', '
				if (param[0] == "slice") {
					if (param[1][0][0] == "empty") {
						result += '0'
					} else {
						result += atjs_compileexpr(param[1][0])
					}
					result += ', '
					if (len(param[1]) == 1) {
						result += 'Infinity'
					} else {
						result += atjs_compileexpr(param[1][1])
					}
				} else {
					result += atjs_compileexpr(param)
				}
				result += ')'
			} else {
				result = atjs_compileexpr(param)
			}
		}
		ret result
	} else if (type == "number") {
		ret value
	} else if (type == "string") {
		ret atjs_encstring(atjs_evalescapes(value[1:-1]))
	} else if (type == "true" || type == "false") {
		ret type
	} else if (type == "list") {
		this result = '['
		this item
		for (item in value) {
			if (result[-1] != "[") {
				result += ", "
			}
			result += atjs_compileexpr(item)
		}
		ret result + ']'
	} else if (type == "neg") {
		ret 'sub(0, ' + atjs_compileexpr(value[0]) + ')'
	} else if (type == "abs") {
		ret 'abs(' + atjs_compileexpr(value[0]) + ')'
	} else if (type == "not") {
		ret '!' + atjs_compilebool(value[0])
	} else if (type == "name") {
		ret 'get(env, ' + atjs_encstring(value) + ')'
	} else if (type == "call") {
		ret atjs_compilecall()
	} else {
		ret 'INVALID EXPRESSION TYPE'
	}
}

fun atjs_compilecall() {
	this result
	if (atjs_isbuiltin(value[0][1])) {
		result = 'f.' + value[0][1] + '('
	} else {
		result = 'getFunc(' + atjs_encstring(value[0][1]) + ')(env'
	}
	this arg
	for (arg in value[1][1]) {
		if (result[-1] != '(') {
			result += ', '
		}
		result += atjs_compileexpr(arg)
	}
	ret result + ')'
}

fun atjs_compilebool(expr) {
	this type = expr[0]
	this value = expr[1]
	this result = atjs_compileexpr(expr)
	if (!(type == "not" || type == "string" || type == "number" || (type == "binop" && value[1][0] == "compareop"))) {
		result = 'bool(' + result + ')'
	}
	ret result
}


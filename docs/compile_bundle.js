(function(groupEnv, extImports) {let f = {print(...args) {convertStyles(args.map(d => f.str(d)).join(" ")).forEach(line => console.log(...line))}, printf(string, list) {f.print(f.format(string, list))}, printc(string) {f.print(f.colored(string))}, getstr(message) {return prompt(message === undefined ? undefined : f.str(message))}, format(string, list) {return string.replace(/%(%|-?\d+)/g, (m, code) => code == "%" ? "%" : f.str(ref(list, parseInt(code))))}, colored(string) {let currentStyles = [], result = ""; for (let i = 0; i < string.length; ) {let match = /^\[(\/?[a-z]*)\]/i.exec(string.substring(i)); if (match) {if (match[1][0] === "/") {currentStyles.pop(); result += "\x1b[0" + currentStyles.map(c => ";" + c).join("") + "m"} else {let code = styleCodes[match[1]]; currentStyles.push(code); result += "\x1b[" + code + "m"}; i += match[0].length} else {result += string[i]; i++}}; return result}, import(name) {groupEnv.files[name].run()}, int(val, base) {if (isNum(val)) return Math.floor(val); else return parseInt(val, base)}, float(val) {if (typeof val === "boolean") val = +val; let result = new Number(parseFloat(val)); result.isFloat = true; return result}, round(n) {return Math.round(n)}, log(n, base) {return f.float(base === undefined ? Math.log(n) : Math.log(n)/Math.log(base))}, sqrt(n) {return f.float(Math.sqrt(n))}, sin(n) {return f.float(Math.sin(n))}, cos(n) {return f.float(Math.cos(n))}, tan(n) {return f.float(Math.tan(n))}, asin(n) {return f.float(Math.asin(n))}, acos(n) {return f.float(Math.acos(n))}, atan(n) {return f.float(Math.atan(n))}, atan2(n) {return f.float(Math.atan2(n))}, random() {return f.float(Math.random())}, randomint(a, b) {return Math.floor(Math.random() * (b - a + 1) + a)}, str(val) {function f(v, p) {if (typeof v === "string") {if (p.length) {return "'" + [...v].map(c => {if (c === "\\" || c === "'") return "\\" + c; else if (c === "\t") return "\\t"; else if (c === "\r") return "\\r"; else if (c === "\n") return "\\n"; else {let n = c.codePointAt(0); if (n < 32 || n === 127) return "\\x" + n.toString(16).padStart(2, "0"); else return c}}).join("") + "'"} else {return v}} else if (typeof v === "number" || v instanceof Number) {let result = v.toString(); if (v.isFloat && /^-?\d+$/.test(result)) result += ".0"; return result} else if (v === true) {return "True"} else if (v === false) {return "False"} else if (Array.isArray(v)) {if (p.includes(v)) return "[...]"; else return "[" + v.map(vv => f(vv, p.slice().concat([v]))).join(", ") + "]"} else {return v.toString()}}; return f(val, [])}, len(val) {return val.length}, ord(c) {return c.codePointAt(0)}, chr(n) {return String.fromCodePoint(n)}, lower(string) {return string.toLowerCase()}, upper(string) {return string.toUpperCase()}, startswith(string, check, a = 0, b = Infinity) {return ref(string, a, b).substring(0, check.length) === check}, endswith(string, check, a = 0, b = Infinity) {let sliced = ref(string, a, b); return sliced.substring(sliced.length - check.length) === check}, replace(string, match, insert, count) {let result = ""; for (let i = 0; i < string.length; ) {if (string.substring(i, i + match.length) === match) {result += insert; i += match.length} else {result += string[i]; i++}}; return result}, split(string, sep, max) {let result = [], startNew = false; if (sep === undefined) string = string.trim(); for (let i = 0; i < string.length; ) {if (sep === undefined) {let match = /^s+/.exec(string.substring(i)); if (match) {i += match[0].length; continue}} else if (string.substring(i, i + sep.length) === sep) {startNew = true; i += sep.length; continue}; if (startNew) {result.push(""); startNew = false}; result[result.length - 1] += string[i]; i++}; return result}, list(d) {return [...d]}, append(list, d) {list.push(d)}, pop(list, i = list.length - 1) {return list.splice(i, 1)[0]}, push() {throw "Unimplemented function"}, remove(list, val) {for (let i = 0; i < list.length; i++) {if (equal(list[i], val)) return list.slice(0, i - 1).concat(list.slice(i + 1))}; throw new Error("Value not in list")}, reverse(list) {list.reverse()}, sort(list) {list.sort((a, b) => less(a, b) ? -1 : 1)}}; if (!groupEnv.funcs) {groupEnv.funcs = {}; for (let name in f) groupEnv.funcs[name] = {type: "builtin", call(...args) {return exportVal(f[name](...args.map(v => importVal(v))))}}}; extImports.forEach(([name, isProp, isFunc, f1, f2]) => {if (isFunc || isProp) {if (groupEnv.funcs[name]) throw new Error("Can't import duplicate function " + JSON.stringify(name)); groupEnv.funcs[name] = {type: "external", isProp, func: f1, getSource: f2, call(...args) {return callExtFunc(this, ...args)}}} else {if (groupEnv.vars[name]) throw new Error("Can't import duplicate variable " + JSON.stringify(name)); groupEnv.vars[name] = {type: "external", isProp, getData: f1, setData: f2, set value(v) {this.setData(v)}, get value() {return this.getData()}}}}); groupEnv.files["atjs.tal"] = {run(env = groupEnv) {setNew(env, "atjs_builtins", [["print", "(...args) {convertStyles(args.map(d => f.str(d)).join(\" \")).forEach(line => console.log(...line))}"], ["printf", "(string, list) {f.print(f.format(string, list))}"], ["printc", "(string) {f.print(f.colored(string))}"], ["getstr", "(message) {return prompt(message === undefined ? undefined : f.str(message))}"], ["format", "(string, list) {return string.replace(/%(%|-?\\d+)/g, (m, code) => code == \"%\" ? \"%\" : f.str(ref(list, parseInt(code))))}"], ["colored", "(string) {let currentStyles = [], result = \"\"; for (let i = 0; i < string.length; ) {let match = /^\\[(\\/?[a-z]*)\\]/i.exec(string.substring(i)); if (match) {if (match[1][0] === \"/\") {currentStyles.pop(); result += \"\\x1b[0\" + currentStyles.map(c => \";\" + c).join(\"\") + \"m\"} else {let code = styleCodes[match[1]]; currentStyles.push(code); result += \"\\x1b[\" + code + \"m\"}; i += match[0].length} else {result += string[i]; i++}}; return result}"], ["import", "(name) {groupEnv.files[name].run()}"], ["int", "(val, base) {if (isNum(val)) return Math.floor(val); else return parseInt(val, base)}"], ["float", "(val) {if (typeof val === \"boolean\") val = +val; let result = new Number(parseFloat(val)); result.isFloat = true; return result}"], ["round", "(n) {return Math.round(n)}"], ["log", "(n, base) {return f.float(base === undefined ? Math.log(n) : Math.log(n)/Math.log(base))}"], ["sqrt", "(n) {return f.float(Math.sqrt(n))}"], ["sin", "(n) {return f.float(Math.sin(n))}"], ["cos", "(n) {return f.float(Math.cos(n))}"], ["tan", "(n) {return f.float(Math.tan(n))}"], ["asin", "(n) {return f.float(Math.asin(n))}"], ["acos", "(n) {return f.float(Math.acos(n))}"], ["atan", "(n) {return f.float(Math.atan(n))}"], ["atan2", "(n) {return f.float(Math.atan2(n))}"], ["random", "() {return f.float(Math.random())}"], ["randomint", "(a, b) {return Math.floor(Math.random() * (b - a + 1) + a)}"], ["str", "(val) {function f(v, p) {if (typeof v === \"string\") {if (p.length) {return \"'\" + [...v].map(c => {if (c === \"\\\\\" || c === \"'\") return \"\\\\\" + c; else if (c === \"\\t\") return \"\\\\t\"; else if (c === \"\\r\") return \"\\\\r\"; else if (c === \"\\n\") return \"\\\\n\"; else {let n = c.codePointAt(0); if (n < 32 || n === 127) return \"\\\\x\" + n.toString(16).padStart(2, \"0\"); else return c}}).join(\"\") + \"'\"} else {return v}} else if (typeof v === \"number\" || v instanceof Number) {let result = v.toString(); if (v.isFloat && /^-?\\d+$/.test(result)) result += \".0\"; return result} else if (v === true) {return \"True\"} else if (v === false) {return \"False\"} else if (Array.isArray(v)) {if (p.includes(v)) return \"[...]\"; else return \"[\" + v.map(vv => f(vv, p.slice().concat([v]))).join(\", \") + \"]\"} else {return v.toString()}}; return f(val, [])}"], ["len", "(val) {return val.length}"], ["ord", "(c) {return c.codePointAt(0)}"], ["chr", "(n) {return String.fromCodePoint(n)}"], ["lower", "(string) {return string.toLowerCase()}"], ["upper", "(string) {return string.toUpperCase()}"], ["startswith", "(string, check, a = 0, b = Infinity) {return ref(string, a, b).substring(0, check.length) === check}"], ["endswith", "(string, check, a = 0, b = Infinity) {let sliced = ref(string, a, b); return sliced.substring(sliced.length - check.length) === check}"], ["replace", "(string, match, insert, count) {let result = \"\"; for (let i = 0; i < string.length; ) {if (string.substring(i, i + match.length) === match) {result += insert; i += match.length} else {result += string[i]; i++}}; return result}"], ["split", "(string, sep, max) {let result = [], startNew = false; if (sep === undefined) string = string.trim(); for (let i = 0; i < string.length; ) {if (sep === undefined) {let match = /^s+/.exec(string.substring(i)); if (match) {i += match[0].length; continue}} else if (string.substring(i, i + sep.length) === sep) {startNew = true; i += sep.length; continue}; if (startNew) {result.push(\"\"); startNew = false}; result[result.length - 1] += string[i]; i++}; return result}"], ["list", "(d) {return [...d]}"], ["append", "(list, d) {list.push(d)}"], ["pop", "(list, i = list.length - 1) {return list.splice(i, 1)[0]}"], ["push", "() {throw \"Unimplemented function\"}"], ["remove", "(list, val) {for (let i = 0; i < list.length; i++) {if (equal(list[i], val)) return list.slice(0, i - 1).concat(list.slice(i + 1))}; throw new Error(\"Value not in list\")}"], ["reverse", "(list) {list.reverse()}"], ["sort", "(list) {list.sort((a, b) => less(a, b) ? -1 : 1)}"]]); setNew(env, "atjs_binfuncs", [["==", ["equal", "(a, b, p = []) {if (isNum(a) && isNum(b)) {return +a === +b} else if (Array.isArray(a) && Array.isArray(b)) {if (p.includes(a) || p.includes(b)) throw new Error(\"Recursion in comparison\"); if (a.length === b.length) {let pp = p.slice().concat([a, b]); for (let i = 0; i < a.length; i++) {if (!equal(a[i], b[i], pp)) return false}; return true} else {return false}} else return a === b}"]], ["!=", ["notEqual", "(a, b) {return !equal(a, b)}"]], ["<=", ["lessEqual", "(a, b) {return equal(a, b) || less(a, b)}"]], [">=", ["greaterEqual", "(a, b) {return !less(a, b)}"]], ["<", ["less", "(a, b, p = []) {if (isNum(a) && isNum(b)) return a < b; else if (typeof a === \"string\" && typeof b === \"string\") return a !== b && [a, b].sort() === a; else if (Array.isArray(a) && Array.isArray(b)) {if (p.includes(a) || p.includes(b)) throw new Error(\"Recursion in comparison\"); let pp = p.slice().concat([a, b]); for (let i = 0; i < a.length || i < b.length; i++) {if (i < a.length) return true; else if (i < b.length) return false; else if (less(a[i], b[i], pp)) return true; else if (less(b[i], a[i], pp)) return false}; return false} else throw new Error(\"Invalid arguments to inequality comparison\")}"]], [">", ["greater", "(a, b) {return !lessEqual(a, b)}"]], ["+", ["add", "(a, b) {if (isNum(a) && isNum(b)) return typeNumOp(a + b, a, b); else return a + b}"]], ["-", ["sub", "(a, b) {return typeNumOp(a - b, a, b)}"]], ["*", ["mul", "(a, b) {if (isNum(a) && isNum(b)) return typeNumOp(a * b, a, b); else if (isNum(a)) return b.repeat(a); else return a.repeat(b)}"]], ["/", ["div", "(a, b) {return f.float(a/b)}"]], ["%", ["mod", "(a, b) {return typeNumOp(a%b, a, b)}"]], ["^", ["exp", "(a, b) {return typeNumOp(a ** b, a, b)}"]]]); setFunc("atjs_isbuiltin", function(env, arg) {env = newEnv(env); setNew(env, "name", arg); setNew(env, "item"); for (let item of get(env, "atjs_builtins")) {set(env, "item", item); if (equal(ref(get(env, "item"), 0), get(env, "name"))) {return true}}; return false}); setFunc("atjs_ref", function(env, ...args) {env = newEnv(env); setNew(env, ["entries", "key"], args); setNew(env, "entry"); for (let item of get(env, "entries")) {set(env, "entry", item); if (equal(ref(get(env, "entry"), 0), get(env, "key"))) {return ref(get(env, "entry"), 1)}}; return false}); setFunc("atjs_hexval", function(env, arg) {env = newEnv(env); setNew(env, "c", arg); setNew(env, "n", f.ord(get(env, "c"))); if (less(get(env, "n"), 65)) {set(env, "n", 48, sub)} else if (less(get(env, "n"), 97)) {set(env, "n", 55, sub)} else {set(env, "n", 87, sub)}; if (bool(and(() => lessEqual(0, get(env, "n")), () => less(get(env, "n"), 16)))) {return get(env, "n")} else {return ""}}); setFunc("atjs_readhex", function(env, ...args) {env = newEnv(env); setNew(env, ["string", "i", "length"], args); setNew(env, "result", 0); setNew(env, "j", 0); setNew(env, "d"); while (less(get(env, "j"), get(env, "length"))) {set(env, "d", ""); if (less(get(env, "i"), f.len(get(env, "string")))) {set(env, "d", getFunc("atjs_hexval")(env, ref(get(env, "string"), get(env, "i"))))}; if (equal(get(env, "d"), "")) {return ""} else {set(env, "result", add(mul(get(env, "result"), 16), get(env, "d"))); set(env, "i", 1, add); set(env, "j", 1, add)}}; return get(env, "result")}); setFunc("atjs_evalescapes", function(env, arg) {env = newEnv(env); setNew(env, "string", arg); setNew(env, "result", ""); setNew(env, "i", 0); setNew(env, "l"); setNew(env, "n"); setNew(env, "d"); while (less(get(env, "i"), f.len(get(env, "string")))) {if (equal(ref(get(env, "string"), get(env, "i")), "\\")) {set(env, "i", 1, add); if (equal(ref(get(env, "string"), get(env, "i")), "a")) {set(env, "result", "\u0007", add)} else if (equal(ref(get(env, "string"), get(env, "i")), "b")) {set(env, "result", "\b", add)} else if (equal(ref(get(env, "string"), get(env, "i")), "f")) {set(env, "result", "\f", add)} else if (equal(ref(get(env, "string"), get(env, "i")), "n")) {set(env, "result", "\n", add)} else if (equal(ref(get(env, "string"), get(env, "i")), "r")) {set(env, "result", "\r", add)} else if (equal(ref(get(env, "string"), get(env, "i")), "t")) {set(env, "result", "\t", add)} else if (equal(ref(get(env, "string"), get(env, "i")), "v")) {set(env, "result", "\u000b", add)} else {set(env, "n", 0); set(env, "d", sub(f.ord(ref(get(env, "string"), get(env, "i"))), 48)); set(env, "l", 1); while (bool(and(() => lessEqual(0, get(env, "d")), () => less(get(env, "d"), 8)))) {set(env, "n", add(mul(get(env, "n"), 8), get(env, "d"))); set(env, "l", 1, add); set(env, "i", 1, add); if (less(get(env, "i"), f.len(get(env, "string")))) {set(env, "d", sub(f.ord(ref(get(env, "string"), get(env, "i"))), 48))} else {break}}; if (equal(get(env, "l"), 1)) {set(env, "n", ""); if (equal(ref(get(env, "string"), get(env, "i")), "x")) {set(env, "l", 2)} else if (equal(ref(get(env, "string"), get(env, "i")), "u")) {set(env, "l", 4)} else if (equal(ref(get(env, "string"), get(env, "i")), "U")) {set(env, "l", 8)} else {set(env, "l", false)}; if (bool(get(env, "l"))) {set(env, "i", 1, add); set(env, "n", getFunc("atjs_readhex")(env, get(env, "string"), get(env, "i"), get(env, "l")))}}; if (equal(get(env, "n"), "")) {set(env, "result", ref(get(env, "string"), get(env, "i")), add)} else {set(env, "result", f.chr(get(env, "n")), add); set(env, "i", sub(get(env, "l"), 1), add)}}} else {set(env, "result", ref(get(env, "string"), get(env, "i")), add)}; set(env, "i", 1, add)}; return get(env, "result")}); setFunc("atjs_encstring", function(env, arg) {env = newEnv(env); setNew(env, "string", arg); setNew(env, "result", "\""); setNew(env, "c"); setNew(env, "n"); setNew(env, "p"); setNew(env, "d"); for (let item of get(env, "string")) {set(env, "c", item); if (bool(or(() => equal(get(env, "c"), "\""), () => equal(get(env, "c"), "\\")))) {set(env, "result", add("\\", get(env, "c")), add)} else if (equal(get(env, "c"), "\b")) {set(env, "result", "\\b", add)} else if (equal(get(env, "c"), "\f")) {set(env, "result", "\\f", add)} else if (equal(get(env, "c"), "\n")) {set(env, "result", "\\n", add)} else if (equal(get(env, "c"), "\r")) {set(env, "result", "\\r", add)} else if (equal(get(env, "c"), "\t")) {set(env, "result", "\\t", add)} else {set(env, "n", f.ord(get(env, "c"))); if (bool(or(() => and(() => lessEqual(0, get(env, "n")), () => lessEqual(get(env, "n"), 31)), () => and(() => lessEqual(127, get(env, "n")), () => lessEqual(get(env, "n"), 159))))) {set(env, "result", "\\u", add); set(env, "p", 4096); while (greaterEqual(get(env, "p"), 1)) {set(env, "d", mod(f.int(div(get(env, "n"), get(env, "p"))), 16)); if (less(get(env, "d"), 10)) {set(env, "result", f.str(get(env, "d")), add)} else {set(env, "result", f.chr(add(87, get(env, "d"))), add)}; set(env, "p", 16, div)}} else {set(env, "result", get(env, "c"), add)}}}; return add(get(env, "result"), "\"")}); setFunc("atjs_compile", function(env, ...args) {env = newEnv(env); setNew(env, ["files", "interopvar"], args); setNew(env, "initfiles", []); setNew(env, "extimports", []); setNew(env, "hasdeclare"); setNew(env, "filescode", ""); setNew(env, "file"); setNew(env, "parsed"); for (let item of get(env, "files")) {set(env, "file", item); set(env, "parsed", getFunc("atjs_parse")(env, ref(get(env, "file"), 1), false)); if (bool(ref(get(env, "parsed"), 1))) {return [get(env, "filescode"), add(add(f.str(ref(get(env, "parsed"), 1)), " in "), ref(get(env, "file"), 0))]}; set(env, "filescode", add(add(add(add("groupEnv.files[", getFunc("atjs_encstring")(env, ref(get(env, "file"), 0))), "] = {run(env = groupEnv) {"), getFunc("atjs_compilestatements")(env, ref(get(env, "parsed"), 0))), "}}; "), add); if (bool(and(() => greater(f.len(get(env, "file")), 2), () => ref(get(env, "file"), 2)))) {f.append(get(env, "initfiles"), ref(get(env, "file"), 0))}}; setNew(env, "wrapperargs", add(add(add(add(add("typeof ", get(env, "interopvar")), "=== \"undefined\" ? ("), get(env, "interopvar")), " = {files: {}, vars: {}}) : "), get(env, "interopvar"))); setNew(env, "wrapperparams", "groupEnv"); setNew(env, "initcode", ""); if (greater(f.len(get(env, "extimports")), 0)) {set(env, "wrapperparams", ", extImports", add); set(env, "initcode", "extImports.forEach(([name, isProp, isFunc, f1, f2]) => {if (isFunc || isProp) {if (groupEnv.funcs[name]) throw new Error(\"Can't import duplicate function \" + JSON.stringify(name)); groupEnv.funcs[name] = {type: \"external\", isProp, func: f1, getSource: f2, call(...args) {return callExtFunc(this, ...args)}}} else {if (groupEnv.vars[name]) throw new Error(\"Can't import duplicate variable \" + JSON.stringify(name)); groupEnv.vars[name] = {type: \"external\", isProp, getData: f1, setData: f2, set value(v) {this.setData(v)}, get value() {return this.getData()}}}}); ", add); set(env, "wrapperargs", ", [", add); setNew(env, "ei"); for (let item of get(env, "extimports")) {set(env, "ei", item); if (notEqual(ref(get(env, "wrapperargs"), -1), "[")) {set(env, "wrapperargs", ", ", add)}; set(env, "wrapperargs", add(add(add(add(add(add("[", getFunc("atjs_encstring")(env, ref(get(env, "ei"), 3))), ", "), or(() => and(() => ref(get(env, "ei"), 1), () => "true"), () => "false")), ", "), or(() => and(() => ref(get(env, "ei"), 2), () => "true"), () => "false")), ", "), add); if (bool(ref(get(env, "ei"), 2))) {if (bool(ref(get(env, "ei"), 1))) {set(env, "wrapperargs", add(add(add("(d, ...args) => d", ref(get(env, "ei"), 0)), "(...args), d => d"), ref(get(env, "ei"), 0)), add)} else {set(env, "wrapperargs", add(add(add("(...args) => ", ref(get(env, "ei"), 0)), "(...args), () => "), ref(get(env, "ei"), 0)), add)}} else {if (bool(ref(get(env, "ei"), 1))) {set(env, "wrapperargs", add(add(add(add("(d, v) => {if (v === undefined) return d", ref(get(env, "ei"), 0)), "; else d"), ref(get(env, "ei"), 0)), " = v}"), add)} else {set(env, "wrapperargs", add(add(add(add("() => ", ref(get(env, "ei"), 0)), ", val => "), ref(get(env, "ei"), 0)), " = val"), add)}}; set(env, "wrapperargs", "]", add)}; set(env, "wrapperargs", "]", add)}; setNew(env, "result", ""); setNew(env, "funcinfo"); set(env, "result", add(add("(function(", get(env, "wrapperparams")), ") {let f = {"), add); for (let item of get(env, "atjs_builtins")) {set(env, "funcinfo", item); if (notEqual(ref(get(env, "result"), -1), "{")) {set(env, "result", ", ", add)}; set(env, "result", add(ref(get(env, "funcinfo"), 0), ref(get(env, "funcinfo"), 1)), add)}; set(env, "result", "}; if (!groupEnv.funcs) {groupEnv.funcs = {}; for (let name in f) groupEnv.funcs[name] = {type: \"builtin\", call(...args) {return exportVal(f[name](...args.map(v => importVal(v))))}}}; ", add); set(env, "result", add(get(env, "initcode"), get(env, "filescode")), add); set(env, "result", "let styleCodes = {black: \"30\", red: \"31\", green: \"32\", yellow: \"33\", blue: \"34\", magenta: \"35\", cyan: \"36\", lightgray: \"37\", darkgray: \"90\", lightred: \"91\", lightgreen: \"92\", lightyellow: \"93\", lightblue: \"94\", lightmagenta: \"95\", lightcyan: \"96\", white: \"97\", bold: \"1\", dim: \"2\", italic: \"3\", underline: \"4\", blink: \"5\", reverse: \"7\", hidden: \"8\", bgblack: \"40\", bgred: \"41\", bggreen: \"42\", bgyellow: \"43\", bgblue: \"44\", bgmagenta: \"45\", bgcyan: \"46\", bglightgray: \"47\", bgdarkgray: \"100\", bglightred: \"101\", bglightgreen: \"102\", bglightyellow: \"103\", bglightblue: \"104\", bglightmagenta: \"105\", bglightcyan: \"106\", bgwhite: \"107\"}; ", add); setNew(env, "name"); for (let item of get(env, "initfiles")) {set(env, "name", item); set(env, "result", add(add("groupEnv.files[", getFunc("atjs_encstring")(env, get(env, "name"))), "].run(); "), add)}; for (let item of get(env, "atjs_binfuncs")) {set(env, "funcinfo", item); set(env, "result", add(add(add("function ", ref(ref(get(env, "funcinfo"), 1), 0)), ref(ref(get(env, "funcinfo"), 1), 1)), "; "), add)}; set(env, "result", "function convertStyles(string) {let result = [], styles = {}, i; do {if (i === undefined) i = 0; else if (string[i] === \"\\n\") i++; let [line, s2, i2] = convertStylesLine(string, styles, i); result.push(line); styles = s2; i = i2} while (i < string.length); return result}; ", add); set(env, "result", "function convertStylesLine(string, currentStyles, i) {let resultText = \"%c\", resultStyles = [evalStyles({})]; while (i < string.length && string[i] !== \"\\n\") {if (string.substring(i, i + 2) === \"%\") {resultText += \"%%\"; i++} else {let match = /^\\x1b\\[(\\d*(?:;\\d*|m\\x1b\\[\\d*)*)m/.exec(string.substring(i)); if (match) {match[1].split(/\\D+/).forEach(code => {code = +code; if (code === 0) {currentStyles = {}} else {applyStyle(currentStyles, code)}}); if (/(?:^|[^%])(?:%%)*%c$/.test(resultText)) {resultStyles[resultStyles.length - 1] = evalStyles(currentStyles)} else {resultText += \"%c\"; resultStyles.push(evalStyles(currentStyles))}; i += match[0].length} else {resultText += string[i]; i++}}}; if (/(?:^|[^%])(?:%%)*%c$/.test(resultText)) {resultText = resultText.substring(0, resultText.length - 2); resultStyles.pop()}; if (resultStyles.length) {resultStyles[0] += \"; padding-left: 0.5em\"; resultStyles[resultStyles.length - 1] += \"; padding-right: 0.5em\"}; return [[resultText || \"\\u200D\", ...resultStyles], currentStyles, i]}; ", add); set(env, "result", "function applyStyle(s, c) {let a = Math.floor(c/10), b = c%10; if (a < 3) {let prop = [, \"bold\", \"dim\", \"italic\", \"underline\", \"blink\", , \"reverse\", \"hidden\"][b]; s[prop] = a === 0} else {let color = b === 9 ? false : [\"black\", [250, 5, 5], [5, 250, 5], [250, 250, 5], [5, 125, 250], [250, 5, 250], [5, 250, 250], \"white\"][b], dark = a%9 > 1; if (a%2) {s.color = color; s.colorDark = dark} else {s.background = color; s.backgroundDark = dark}}}; ", add); set(env, "result", "function evalStyles(s) {let items = [], fg = evalColor(s.color || \"white\", s.color ? s.colorDark : false, s.dim), bg = evalColor(s.background || \"black\", s.background ? s.backgroundDark : true, false); if (s.reverse) {let x = fg; fg = bg; bg = x}; fg = \"rgb(\" + fg.join(\", \") + \")\"; bg = \"rgb(\" + bg.join(\", \") + \")\"; if (s.hidden) items.push(\"color: transparent\"); else if (s.blink) items.push(\"color: \" + bg, \"text-shadow: 1px 1px 2px \" + fg + \", -1px -1px 2px \" + fg); else items.push(\"color: \" + fg); items.push(\"background: \" + bg); if (s.bold) items.push(\"font-weight: bold\");  if (s.italic) items.push(\"font-style: italic\"); if (s.underline) items.push(\"text-decoration: underline\"); return items.join(\"; \")}; ", add); set(env, "result", "function evalColor(c, dark, dim) {if (c === \"white\") {if (dark) {c = [220, 220, 220]} else {c = [250, 250, 250]}} else if (c === \"black\") {if (dark) {c = [5, 5, 5]} else {c = [50, 50, 50]}} else if (dark) {c = c.map(v => v * 0.75)}; if (dim) {let gray = dark ? 40 : 100; c = c.map(v => v * 0.6 + gray * 0.4)}; return c.map(v => Math.round(v))}; ", add); set(env, "result", "function isNum(v) {return typeof v === \"number\" || v instanceof Number || typeof v === \"boolean\"}; ", add); set(env, "result", "function typeNumOp(result, a, b) {return a.isFloat || b?.isFloat ? f.float(result) : f.int(result)}; ", add); set(env, "result", "function bool(val) {return isNum(val) ? +val !== 0 : typeof val === \"string\" ? val !== \"\" : Array.isArray(val) ? val.length !== 0 : true}; ", add); set(env, "result", "function or(...funcs) {let result = false; for (let f of funcs) {let fr = f(); if (bool(fr)) return fr; else result = fr}; return result}; ", add); set(env, "result", "function and(...funcs) {let result = true; for (let f of funcs) {let fr = f(); if (!bool(fr)) return fr; else result = fr}; return result}; ", add); set(env, "result", "function abs(n) {return typeNumOp(Math.abs(n), n)}; ", add); set(env, "result", "function ref(d, a, b) {if (a < 0) a += d.length; if (b === undefined) {return d[+a]} else {if (b < 0) b += d.length; return typeof d === \"string\" ? d.substring(a, b) : d.slice(a, b)}}; ", add); set(env, "result", "function listSet(list, index, val, func) {if (index < 0) index += list.length; if (func) list[index] = func(list[index], val); else list[index] = val}; ", add); set(env, "result", "function range(a, b, inclusive) {if (inclusive) b++; let result = []; for (let i = a; i < b; i++) result.push(i); return result}; ", add); set(env, "result", "function newEnv(parent) {return {parent, vars: {}}}; ", add); set(env, "result", "function setNew(env, names, vals) {if (!Array.isArray(names)) {names = [names]; vals = [vals]}; names.forEach((name, i) => {if (env.vars[name]) throw new Error(\"Can't redeclare variable \" + JSON.stringify(name)); env.vars[name] = {type: \"normal\", data: vals[i], get value() {return exportVal(this.data)}, set value(v) {this.data = importVal(v)}}})}; ", add); set(env, "result", "function set(env, name, val, func) {env = getContainingEnv(env, name); let varObj = env.vars[name]; if (func) {setVarByObj(varObj, func(getVarByObj(varObj), val))} else {setVarByObj(varObj, val)}}; ", add); set(env, "result", "function get(env, name) {env = getContainingEnv(env, name, true); if (env.vars[name]) return getVarByObj(env.vars[name]); else if (groupEnv.funcs[name]) {let obj = groupEnv.funcs[name]; return (...args) => obj.call(...args)} else throw new Error(\"Nonexistant variable \" + JSON.stringify(name))}; ", add); set(env, "result", "function getContainingEnv(env, name, failsoft) {if (env.vars[name]) return env; else if (env.parent) return getContainingEnv(env.parent, name, failsoft); else if (failsoft) return env; else throw new Error(\"Nonexistant variable \" + JSON.stringify(name))}; ", add); set(env, "result", "function setVarByObj(obj, val) {if (obj.type === \"external\") {obj.setData(exportVal(val))} else {obj.data = val}}; ", add); set(env, "result", "function getVarByObj(obj) {if (obj.type === \"external\") {return importVal(obj.getData())} else {return obj.data}}; ", add); set(env, "result", "function importVal(val, p = [], pr = []) {if (typeof val === \"number\" || val instanceof Number) return f.float(val); else if (Array.isArray(val)) return convertRecursive(val, p, pr, importVal); else return val}; ", add); set(env, "result", "function exportVal(val, p = [], pr = []) {if (val instanceof Number && val.isFloat) return +val; else if (Array.isArray(val)) return convertRecursive(val, p, pr, exportVal); else return val}; ", add); set(env, "result", "function convertRecursive(val, p, pr, f) {let pi = p.indexOf(val); if (pi === -1) {let result = [], pp = [...p, val], ppr = [...pr, result]; for (let item of val) result.push(f(item, pp, ppr)); return result} else {return pr[pi]}}; ", add); set(env, "result", "function setFunc(name, func) {if (groupEnv.funcs[name]) throw new Error(\"Can't redeclare function \" + JSON.stringify(name)); groupEnv.funcs[name] = {type: \"normal\", func, call(...args) {return exportVal(this.func(groupEnv, ...args.map(v => importVal(v))))}}}; ", add); set(env, "result", "function getFunc(name) {let obj = groupEnv.funcs[name]; if (obj) {if (obj.type === \"external\") {return (env, ...args) => importVal(callExtFunc(obj, ...args.map(v => exportVal(v))))} else {return obj.func}} else {throw new Error(\"Nonexistant function \" + JSON.stringify(name))}}; ", add); set(env, "result", "function callExtFunc(obj, ...args) {let sourceFunc = obj.getSource && obj.getSource(...args); return sourceFunc?.prototype !== undefined ? new sourceFunc(...args) : obj.func(...args)}; ", add); set(env, "result", add(add("})(", get(env, "wrapperargs")), ");"), add); return [get(env, "result"), false]}); setFunc("atjs_compilestatements", function(env, arg) {env = newEnv(env); setNew(env, "expr", arg); setNew(env, "result", ""); setNew(env, "statement"); setNew(env, "statementcode"); for (let item of ref(get(env, "expr"), 1)) {set(env, "statement", item); set(env, "statementcode", getFunc("atjs_compilestatement")(env, get(env, "statement"))); if (bool(get(env, "statementcode"))) {if (bool(get(env, "result"))) {set(env, "result", "; ", add)}; set(env, "result", get(env, "statementcode"), add)}}; return get(env, "result")}); setFunc("atjs_compilestatement", function(env, arg) {env = newEnv(env); setNew(env, "expr", arg); setNew(env, "type", ref(get(env, "expr"), 0)); setNew(env, "value", ref(get(env, "expr"), 1)); if (equal(get(env, "type"), "statements")) {return add(add("{", getFunc("atjs_compilestatements")(env, get(env, "expr"))), "}")} else if (equal(get(env, "type"), "if")) {setNew(env, "result", add(add(add("if (", getFunc("atjs_compilebool")(env, ref(get(env, "value"), 0))), ") "), getFunc("atjs_compilestatement")(env, ref(get(env, "value"), 1)))); if (greater(f.len(get(env, "value")), 2)) {set(env, "result", add(" else ", getFunc("atjs_compilestatement")(env, ref(get(env, "value"), 2))), add)}; return get(env, "result")} else if (equal(get(env, "type"), "for")) {return add(add(add(add(add(add("for (let item of ", getFunc("atjs_compileexpr")(env, ref(get(env, "value"), 1))), ") {set(env, "), getFunc("atjs_encstring")(env, ref(ref(get(env, "value"), 0), 1))), ", item); "), getFunc("atjs_compilestatements")(env, ref(get(env, "value"), 2))), "}")} else if (equal(get(env, "type"), "while")) {return add(add(add("while (", getFunc("atjs_compilebool")(env, ref(get(env, "value"), 0))), ") "), getFunc("atjs_compilestatement")(env, ref(get(env, "value"), 1)))} else if (equal(get(env, "type"), "function")) {return getFunc("atjs_compilefunction")(env, get(env, "value"))} else if (equal(get(env, "type"), "break")) {return "break"} else if (equal(get(env, "type"), "return")) {if (greater(f.len(get(env, "value")), 0)) {return add("return ", getFunc("atjs_compileexpr")(env, ref(get(env, "value"), 0)))} else {return "return"}} else if (equal(get(env, "type"), "declare")) {set(env, "hasdeclare", true); setNew(env, "result", add("setNew(env, ", getFunc("atjs_encstring")(env, ref(ref(get(env, "value"), 0), 1)))); if (greater(f.len(get(env, "value")), 1)) {set(env, "result", add(", ", getFunc("atjs_compileexpr")(env, ref(get(env, "value"), 1))), add)}; return add(get(env, "result"), ")")} else if (equal(get(env, "type"), "call")) {return getFunc("atjs_compilecall")(env)} else if (equal(get(env, "type"), "assign")) {setNew(env, "result", add(add(add("set(env, ", getFunc("atjs_encstring")(env, ref(ref(get(env, "value"), 0), 1))), ", "), getFunc("atjs_compileexpr")(env, ref(get(env, "value"), 2)))); if (notEqual(ref(ref(get(env, "value"), 1), 1), "=")) {set(env, "result", add(", ", ref(getFunc("atjs_ref")(env, get(env, "atjs_binfuncs"), ref(ref(ref(get(env, "value"), 1), 1), 0)), 0)), add)}; return add(get(env, "result"), ")")} else if (equal(get(env, "type"), "listassign")) {setNew(env, "result", add(add(add(add(add("listSet(", getFunc("atjs_compileexpr")(env, ref(get(env, "value"), 0))), ", "), getFunc("atjs_compileexpr")(env, ref(get(env, "value"), 1))), ", "), getFunc("atjs_compileexpr")(env, ref(get(env, "value"), 3)))); if (notEqual(ref(ref(get(env, "value"), 2), 1), "=")) {set(env, "result", add(", ", ref(getFunc("atjs_ref")(env, get(env, "atjs_binfuncs"), ref(ref(ref(get(env, "value"), 2), 1), 0)), 0)), add)}; return add(get(env, "result"), ")")} else if (equal(get(env, "type"), "extimport")) {setNew(env, "name", ""); setNew(env, "isprop", false); setNew(env, "preferfunc", false); setNew(env, "localname", "UNNAMED IMPORT"); setNew(env, "i", 0); if (equal(ref(ref(get(env, "value"), 0), 0), "name")) {set(env, "name", ref(ref(get(env, "value"), 0), 1)); set(env, "localname", ref(ref(get(env, "value"), 0), 1)); set(env, "i", 1, add)}; if (bool(and(() => less(get(env, "i"), f.len(get(env, "value"))), () => equal(ref(ref(get(env, "value"), get(env, "i")), 0), "propref")))) {if (!bool(get(env, "name"))) {set(env, "isprop", true)}; setNew(env, "propname"); for (let item of ref(ref(get(env, "value"), get(env, "i")), 1)) {set(env, "propname", item); if (equal(ref(get(env, "propname"), 0), "name")) {set(env, "name", add(".", ref(get(env, "propname"), 1)), add); set(env, "localname", ref(get(env, "propname"), 1))} else {set(env, "name", "[", add); if (equal(ref(get(env, "propname"), 0), "string")) {set(env, "name", getFunc("atjs_encstring")(env, getFunc("atjs_evalescapes")(env, ref(ref(get(env, "propname"), 1), 1, -1))), add)} else {set(env, "name", ref(get(env, "propname"), 1), add)}; set(env, "name", "]", add)}}; set(env, "i", 1, add)}; if (bool(and(() => less(get(env, "i"), f.len(get(env, "value"))), () => equal(ref(ref(get(env, "value"), get(env, "i")), 0), "(")))) {set(env, "preferfunc", true); set(env, "i", 1, add)}; if (less(get(env, "i"), f.len(get(env, "value")))) {set(env, "localname", ref(ref(get(env, "value"), get(env, "i")), 1))}; f.append(get(env, "extimports"), [get(env, "name"), get(env, "isprop"), get(env, "preferfunc"), get(env, "localname")]); return ""} else {return "INVALID STATEMENT TYPE"}}); setFunc("atjs_compilefunction", function(env, arg) {env = newEnv(env); setNew(env, "value", arg); setNew(env, "name", ref(ref(get(env, "value"), 0), 1)); setNew(env, "params", ref(ref(get(env, "value"), 1), 1)); setNew(env, "body", ref(get(env, "value"), 2)); setNew(env, "hasdeclare", false); setNew(env, "bodycode", getFunc("atjs_compilestatements")(env, ref(get(env, "value"), 2))); setNew(env, "bodystart", ""); setNew(env, "paramscode", "env"); if (bool(or(() => get(env, "hasdeclare"), () => f.len(get(env, "params"))))) {set(env, "bodystart", "env = newEnv(env); ")}; if (greater(f.len(get(env, "params")), 1)) {set(env, "paramscode", ", ...args", add); set(env, "bodystart", "setNew(env, [", add); setNew(env, "param"); for (let item of get(env, "params")) {set(env, "param", item); if (notEqual(ref(get(env, "bodystart"), -1), "[")) {set(env, "bodystart", ", ", add)}; set(env, "bodystart", getFunc("atjs_encstring")(env, ref(get(env, "param"), 1)), add)}; set(env, "bodystart", "], args); ", add)} else if (bool(f.len(get(env, "params")))) {set(env, "paramscode", ", arg", add); set(env, "bodystart", add(add("setNew(env, ", getFunc("atjs_encstring")(env, ref(ref(get(env, "params"), 0), 1))), ", arg); "), add)}; return add(add(add(add(add(add(add("setFunc(", getFunc("atjs_encstring")(env, get(env, "name"))), ", function("), get(env, "paramscode")), ") {"), get(env, "bodystart")), get(env, "bodycode")), "})")}); setFunc("atjs_compileexpr", function(env, arg) {env = newEnv(env); setNew(env, "expr", arg); setNew(env, "type", ref(get(env, "expr"), 0)); setNew(env, "value", ref(get(env, "expr"), 1)); if (bool(or(() => equal(get(env, "type"), "or"), () => equal(get(env, "type"), "and")))) {setNew(env, "result", add(get(env, "type"), "(")); setNew(env, "arg"); for (let item of get(env, "value")) {set(env, "arg", item); if (notEqual(ref(get(env, "result"), -1), "(")) {set(env, "result", ", ", add)}; set(env, "result", add("() => ", getFunc("atjs_compileexpr")(env, get(env, "arg"))), add)}; return add(get(env, "result"), ")")} else if (equal(get(env, "type"), "binop")) {setNew(env, "result", getFunc("atjs_compileexpr")(env, ref(get(env, "value"), 0))); setNew(env, "i", 1); while (less(get(env, "i"), f.len(get(env, "value")))) {set(env, "result", add(add(add(add(add(ref(getFunc("atjs_ref")(env, get(env, "atjs_binfuncs"), ref(ref(get(env, "value"), get(env, "i")), 1)), 0), "("), get(env, "result")), ", "), getFunc("atjs_compileexpr")(env, ref(get(env, "value"), add(get(env, "i"), 1)))), ")")); set(env, "i", 2, add)}; return get(env, "result")} else if (equal(get(env, "type"), "range")) {return add(add(add(add(add("range(", getFunc("atjs_compileexpr")(env, ref(get(env, "value"), 0))), ", "), getFunc("atjs_compileexpr")(env, ref(get(env, "value"), 2))), or(() => and(() => equal(ref(ref(get(env, "value"), 1), 1), "to"), () => ", true"), () => "")), ")")} else if (equal(get(env, "type"), "listref")) {setNew(env, "result", ""); setNew(env, "param"); for (let item of get(env, "value")) {set(env, "param", item); if (bool(get(env, "result"))) {set(env, "result", add(add("ref(", get(env, "result")), ", ")); if (equal(ref(get(env, "param"), 0), "slice")) {if (equal(ref(ref(ref(get(env, "param"), 1), 0), 0), "empty")) {set(env, "result", "0", add)} else {set(env, "result", getFunc("atjs_compileexpr")(env, ref(ref(get(env, "param"), 1), 0)), add)}; set(env, "result", ", ", add); if (equal(f.len(ref(get(env, "param"), 1)), 1)) {set(env, "result", "Infinity", add)} else {set(env, "result", getFunc("atjs_compileexpr")(env, ref(ref(get(env, "param"), 1), 1)), add)}} else {set(env, "result", getFunc("atjs_compileexpr")(env, get(env, "param")), add)}; set(env, "result", ")", add)} else {set(env, "result", getFunc("atjs_compileexpr")(env, get(env, "param")))}}; return get(env, "result")} else if (equal(get(env, "type"), "number")) {return get(env, "value")} else if (equal(get(env, "type"), "string")) {return getFunc("atjs_encstring")(env, getFunc("atjs_evalescapes")(env, ref(get(env, "value"), 1, -1)))} else if (bool(or(() => equal(get(env, "type"), "true"), () => equal(get(env, "type"), "false")))) {return get(env, "type")} else if (equal(get(env, "type"), "list")) {setNew(env, "result", "["); setNew(env, "item"); for (let item of get(env, "value")) {set(env, "item", item); if (notEqual(ref(get(env, "result"), -1), "[")) {set(env, "result", ", ", add)}; set(env, "result", getFunc("atjs_compileexpr")(env, get(env, "item")), add)}; return add(get(env, "result"), "]")} else if (equal(get(env, "type"), "neg")) {return add(add("sub(0, ", getFunc("atjs_compileexpr")(env, ref(get(env, "value"), 0))), ")")} else if (equal(get(env, "type"), "abs")) {return add(add("abs(", getFunc("atjs_compileexpr")(env, ref(get(env, "value"), 0))), ")")} else if (equal(get(env, "type"), "not")) {return add("!", getFunc("atjs_compilebool")(env, ref(get(env, "value"), 0)))} else if (equal(get(env, "type"), "name")) {return add(add("get(env, ", getFunc("atjs_encstring")(env, get(env, "value"))), ")")} else if (equal(get(env, "type"), "call")) {return getFunc("atjs_compilecall")(env)} else {return "INVALID EXPRESSION TYPE"}}); setFunc("atjs_compilecall", function(env) {env = newEnv(env); setNew(env, "result"); if (bool(getFunc("atjs_isbuiltin")(env, ref(ref(get(env, "value"), 0), 1)))) {set(env, "result", add(add("f.", ref(ref(get(env, "value"), 0), 1)), "("))} else {set(env, "result", add(add("getFunc(", getFunc("atjs_encstring")(env, ref(ref(get(env, "value"), 0), 1))), ")(env"))}; setNew(env, "arg"); for (let item of ref(ref(get(env, "value"), 1), 1)) {set(env, "arg", item); if (notEqual(ref(get(env, "result"), -1), "(")) {set(env, "result", ", ", add)}; set(env, "result", getFunc("atjs_compileexpr")(env, get(env, "arg")), add)}; return add(get(env, "result"), ")")}); setFunc("atjs_compilebool", function(env, arg) {env = newEnv(env); setNew(env, "expr", arg); setNew(env, "type", ref(get(env, "expr"), 0)); setNew(env, "value", ref(get(env, "expr"), 1)); setNew(env, "result", getFunc("atjs_compileexpr")(env, get(env, "expr"))); if (!bool(or(() => equal(get(env, "type"), "not"), () => equal(get(env, "type"), "string"), () => equal(get(env, "type"), "number"), () => and(() => equal(get(env, "type"), "binop"), () => equal(ref(ref(get(env, "value"), 1), 0), "compareop"))))) {set(env, "result", add(add("bool(", get(env, "result")), ")"))}; return get(env, "result")})}}; groupEnv.files["compile.tal"] = {run(env = groupEnv) {f.import("talon-parser.tal"); f.import("atjs.tal"); setNew(env, "fileInp", getFunc("getElementById")(env, "fileInp")); setNew(env, "codeInp", getFunc("getElementById")(env, "codeInp")); setNew(env, "initFileInp", getFunc("getElementById")(env, "initFileInp")); setNew(env, "interopVarInp", getFunc("getElementById")(env, "interopVarInp")); setNew(env, "compileButton", getFunc("getElementById")(env, "compileButton")); setNew(env, "compileRunButton", getFunc("getElementById")(env, "compileRunButton")); setNew(env, "compileMessageContainer", getFunc("getElementById")(env, "compileMessageContainer")); setNew(env, "compileMessageElem", getFunc("getElementById")(env, "compileMessageElem")); setNew(env, "iframe", getFunc("getElementById")(env, "iframe")); setNew(env, "builtinfileopts", [["//auto", "Auto"], ["//", "None"], ["//text", "Text input"]]); setNew(env, "files", []); setNew(env, "compiletype"); setNew(env, "filesdata"); setNew(env, "fi"); setNew(env, "initname"); setNew(env, "url"); setFunc("updatefilelist", function(env) {env = newEnv(env); set(env, "files", getFunc("arrayFrom")(env, getFunc("getFiles")(env, get(env, "fileInp")))); setNew(env, "currentval", getFunc("elemValue")(env, get(env, "initFileInp"))); getFunc("innerHTML")(env, get(env, "initFileInp"), ""); setNew(env, "opt"); setNew(env, "optinfo"); for (let item of get(env, "builtinfileopts")) {set(env, "optinfo", item); set(env, "opt", getFunc("createElement")(env, "option")); getFunc("elemValue")(env, get(env, "opt"), ref(get(env, "optinfo"), 0)); getFunc("textContent")(env, get(env, "opt"), ref(get(env, "optinfo"), 1)); getFunc("appendChild")(env, get(env, "initFileInp"), get(env, "opt"))}; setNew(env, "file"); for (let item of get(env, "files")) {set(env, "file", item); set(env, "opt", getFunc("createElement")(env, "option")); getFunc("elemValue")(env, get(env, "opt"), getFunc("getName")(env, get(env, "file"))); getFunc("textContent")(env, get(env, "opt"), getFunc("getName")(env, get(env, "file"))); getFunc("appendChild")(env, get(env, "initFileInp"), get(env, "opt"))}; getFunc("elemValue")(env, get(env, "initFileInp"), get(env, "currentval"))}); setFunc("handlecodekey", function(env, arg) {env = newEnv(env); setNew(env, "e", arg); if (equal(getFunc("getKey")(env, get(env, "e")), "Tab")) {getFunc("preventDefault")(env, get(env, "e")); getFunc("setRangeText")(env, get(env, "codeInp"), "\t", getFunc("selectionStart")(env, get(env, "codeInp")), getFunc("selectionEnd")(env, get(env, "codeInp")), "end")}}); setFunc("startdlcompile", function(env) {set(env, "compiletype", "dl"); getFunc("initcompile")(env); getFunc("setTimeout")(env, get(env, "startcompile"), 1)}); setFunc("startruncompile", function(env) {set(env, "compiletype", "run"); getFunc("initcompile")(env); getFunc("setTimeout")(env, get(env, "startcompile"), 1)}); setFunc("initcompile", function(env) {getFunc("setDisabled")(env, get(env, "compileButton"), true); getFunc("setDisabled")(env, get(env, "compileRunButton"), true); getFunc("textContent")(env, get(env, "compileMessageElem"), "Compiling...."); getFunc("removeClass")(env, get(env, "compileMessageElem"), "error"); getFunc("removeClass")(env, get(env, "compileMessageContainer"), "hidden")}); setFunc("startcompile", function(env) {set(env, "filesdata", []); set(env, "fi", 0); set(env, "initname", ""); if (bool(f.len(get(env, "files")))) {getFunc("handlePromise")(env, getFunc("readText")(env, ref(get(env, "files"), get(env, "fi"))), get(env, "readfilesnext"))} else {getFunc("finishcompile")(env)}}); setFunc("readfilesnext", function(env, arg) {env = newEnv(env); setNew(env, "text", arg); setNew(env, "name", getFunc("getName")(env, ref(get(env, "files"), get(env, "fi")))); setNew(env, "data", [get(env, "name"), get(env, "text")]); if (bool(or(() => equal(get(env, "name"), getFunc("elemValue")(env, get(env, "initFileInp"))), () => and(() => equal(get(env, "fi"), 0), () => equal(getFunc("elemValue")(env, get(env, "initFileInp")), "//auto"), () => !bool(getFunc("elemValue")(env, get(env, "codeInp"))))))) {f.append(get(env, "data"), true); set(env, "initname", get(env, "name"))}; f.append(get(env, "filesdata"), get(env, "data")); set(env, "fi", 1, add); if (less(get(env, "fi"), f.len(get(env, "files")))) {getFunc("handlePromise")(env, getFunc("readText")(env, ref(get(env, "files"), get(env, "fi"))), get(env, "readfilesnext"))} else {getFunc("finishcompile")(env)}}); setFunc("finishcompile", function(env) {env = newEnv(env); if (bool(getFunc("elemValue")(env, get(env, "codeInp")))) {setNew(env, "textdata", ["//text", getFunc("elemValue")(env, get(env, "codeInp"))]); if (bool(or(() => equal(getFunc("elemValue")(env, get(env, "initFileInp")), "//text"), () => equal(getFunc("elemValue")(env, get(env, "initFileInp")), "//auto")))) {f.append(get(env, "textdata"), true)}; f.append(get(env, "filesdata"), get(env, "textdata"))}; setNew(env, "result", getFunc("atjs_compile")(env, get(env, "filesdata"), getFunc("elemValue")(env, get(env, "interopVarInp")))); if (bool(ref(get(env, "result"), 1))) {getFunc("textContent")(env, get(env, "compileMessageElem"), f.str(ref(get(env, "result"), 1))); getFunc("addClass")(env, get(env, "compileMessageElem"), "error")} else {if (equal(get(env, "compiletype"), "run")) {getFunc("revokeObjectURL")(env, get(env, "url")); set(env, "url", getFunc("createObjectURL")(env, getFunc("Blob")(env, [ref(get(env, "result"), 0)]))); getFunc("setAttribute")(env, get(env, "iframe"), "srcdoc", add(add("<script src=\"", get(env, "url")), "\"></script>"))} else {setNew(env, "name", get(env, "initname")); if (bool(and(() => !bool(get(env, "name")), () => equal(f.len(get(env, "files")), 1)))) {set(env, "name", getFunc("getName")(env, ref(get(env, "files"), 0)))}; if (bool(get(env, "name"))) {if (bool(f.endswith(f.lower(get(env, "name")), ".tal"))) {set(env, "name", ref(get(env, "name"), 0, -4))}; if (greater(f.len(get(env, "filesdata")), 1)) {set(env, "name", "_bundle", add)}; set(env, "name", ".js", add)} else {set(env, "name", "compiled.js")}; getFunc("downloadtext")(env, ref(get(env, "result"), 0), get(env, "name"))}; getFunc("addClass")(env, get(env, "compileMessageContainer"), "hidden")}; getFunc("setDisabled")(env, get(env, "compileButton"), false); getFunc("setDisabled")(env, get(env, "compileRunButton"), false)}); setFunc("downloadtext", function(env, ...args) {env = newEnv(env); setNew(env, ["text", "name"], args); getFunc("revokeObjectURL")(env, get(env, "url")); set(env, "url", getFunc("createObjectURL")(env, getFunc("Blob")(env, [get(env, "text")], getFunc("objectFromEntries")(env, [["type", "application/javascript"]])))); setNew(env, "a", getFunc("createElement")(env, "a")); getFunc("setAttribute")(env, get(env, "a"), "href", get(env, "url")); getFunc("setAttribute")(env, get(env, "a"), "download", get(env, "name")); getFunc("dispatchEvent")(env, get(env, "a"), getFunc("MouseEvent")(env, "click"))}); getFunc("addEventListener")(env, get(env, "fileInp"), "change", get(env, "updatefilelist")); getFunc("addEventListener")(env, get(env, "codeInp"), "keydown", get(env, "handlecodekey")); getFunc("addEventListener")(env, get(env, "compileButton"), "click", get(env, "startdlcompile")); getFunc("addEventListener")(env, get(env, "compileRunButton"), "click", get(env, "startruncompile"))}}; groupEnv.files["talon-parser.tal"] = {run(env = groupEnv) {setFunc("atjs_parse", function(env, ...args) {env = newEnv(env); setNew(env, ["text", "usetransforms"], args); setNew(env, "e", false); setNew(env, "i", 0); setNew(env, "tokens", getFunc("atjs_parse_pt_tokens")(env)); if (bool(get(env, "e"))) {return [get(env, "tokens"), get(env, "e")]} else if (bool(or(() => less(get(env, "i"), f.len(get(env, "text"))), () => equal(get(env, "tokens"), false)))) {return [get(env, "tokens"), getFunc("atjs_parse_error_t")(env)]}; set(env, "i", 0); setNew(env, "result", getFunc("atjs_parse_pe_statements")(env)); if (bool(get(env, "e"))) {return [get(env, "result"), get(env, "e")]} else if (bool(or(() => less(get(env, "i"), f.len(get(env, "tokens"))), () => equal(get(env, "result"), false)))) {return [get(env, "result"), getFunc("atjs_parse_error_t")(env)]}; if (bool(get(env, "usetransforms"))) {set(env, "result", getFunc("atjs_parse_evaltransforms")(env, ref(get(env, "result"), 0)))} else {set(env, "result", ref(get(env, "result"), 0))}; return [get(env, "result"), get(env, "e")]}); setFunc("atjs_parse_init", function(env, arg) {env = newEnv(env); setNew(env, "type", arg); return [get(env, "type"), [], get(env, "i")]}); setFunc("atjs_parse_handle", function(env, ...args) {env = newEnv(env); setNew(env, ["data", "save"], args); if (bool(or(() => get(env, "e"), () => equal(get(env, "data"), false)))) {return false} else {if (bool(get(env, "save"))) {setNew(env, "expr"); for (let item of get(env, "data")) {set(env, "expr", item); f.append(ref(get(env, "result"), 1), get(env, "expr"))}}; return true}}); setFunc("atjs_parse_encstring", function(env, arg) {env = newEnv(env); setNew(env, "string", arg); set(env, "string", f.str([get(env, "string")])); return ref(get(env, "string"), 1, -1)}); setFunc("atjs_parse_formatloc", function(env, ...args) {env = newEnv(env); setNew(env, ["text", "i"], args); setNew(env, "loc", getFunc("atjs_parse_getloc")(env, get(env, "text"), get(env, "i"))); return add(add(add("line ", f.str(add(ref(get(env, "loc"), 1), 1))), " character "), f.str(add(ref(get(env, "loc"), 2), 1)))}); setFunc("atjs_parse_getloc", function(env, ...args) {env = newEnv(env); setNew(env, ["text", "i"], args); setNew(env, "j", 0); setNew(env, "k", 0); setNew(env, "l", 0); while (bool(and(() => less(get(env, "j"), get(env, "i")), () => less(get(env, "j"), f.len(get(env, "text")))))) {if (equal(ref(get(env, "text"), get(env, "j")), "\n")) {set(env, "k", 1, add); set(env, "l", add(get(env, "j"), 1))}; set(env, "j", 1, add)}; return [get(env, "i"), get(env, "k"), sub(get(env, "i"), get(env, "l"))]}); setFunc("atjs_parse_evaltransforms", function(env, arg) {env = newEnv(env); setNew(env, "expr", arg); setNew(env, "val"); if (equal(ref(ref(get(env, "expr"), 1), 0, 0), "")) {set(env, "val", ref(get(env, "expr"), 1))} else {set(env, "val", []); setNew(env, "item"); for (let item of ref(get(env, "expr"), 1)) {set(env, "item", item); f.append(get(env, "val"), getFunc("atjs_parse_evaltransforms")(env, get(env, "item")))}}; return getFunc("atjs_parse_transform")(env, ref(get(env, "expr"), 0), get(env, "val"), ref(get(env, "expr"), 2))}); setFunc("atjs_parse_e_result", function(env) {if (bool(get(env, "e"))) {return false} else if (equal(ref(get(env, "result"), 0), false)) {return ref(get(env, "result"), 1)} else {if (less(ref(get(env, "result"), 2), f.len(get(env, "tokens")))) {listSet(get(env, "result"), 2, ref(ref(get(env, "tokens"), ref(get(env, "result"), 2)), 2))} else {listSet(get(env, "result"), 2, f.len(get(env, "text")))}; return [get(env, "result")]}}); setFunc("atjs_parse_match_eo", function(env, ...args) {env = newEnv(env); setNew(env, ["string", "offset", "inverse"], args); setNew(env, "j", add(get(env, "i"), or(() => get(env, "offset"), () => 0))); if (bool(and(() => less(get(env, "j"), f.len(get(env, "tokens"))), () => equal(ref(ref(get(env, "tokens"), get(env, "j")), 0), get(env, "string"))))) {if (equal(get(env, "offset"), "")) {set(env, "i", 1, add)}; if (bool(get(env, "inverse"))) {return false} else {return [ref(get(env, "tokens"), get(env, "j"))]}} else {if (bool(get(env, "inverse"))) {return true} else {return false}}}); setFunc("atjs_parse_matchany_eo", function(env, ...args) {env = newEnv(env); setNew(env, ["offset", "inverse"], args); setNew(env, "j", add(get(env, "i"), or(() => get(env, "offset"), () => 0))); if (less(get(env, "j"), f.len(get(env, "tokens")))) {if (equal(get(env, "offset"), "")) {set(env, "i", 1, add)}; if (bool(get(env, "inverse"))) {return false} else {return [ref(get(env, "tokens"), get(env, "j"))]}} else {if (bool(get(env, "inverse"))) {return true} else {return false}}}); setFunc("atjs_parse_match_e", function(env, arg) {env = newEnv(env); setNew(env, "string", arg); return getFunc("atjs_parse_match_eo")(env, get(env, "string"), "", false)}); setFunc("atjs_parse_matchany_e", function(env) {return getFunc("atjs_parse_matchany_eo")(env, "", false)}); setFunc("atjs_parse_error_e", function(env) {if (less(get(env, "i"), f.len(get(env, "tokens")))) {return add(add(add(add(add("Unexpected", or(() => and(() => equal(ref(ref(get(env, "tokens"), get(env, "i")), 0), ref(ref(get(env, "tokens"), get(env, "i")), 1)), () => ""), () => add(" ", ref(ref(get(env, "tokens"), get(env, "i")), 0)))), " token "), getFunc("atjs_parse_encstring")(env, ref(ref(get(env, "tokens"), get(env, "i")), 1))), " at "), getFunc("atjs_parse_formatloc")(env, get(env, "text"), ref(ref(get(env, "tokens"), get(env, "i")), 2)))} else {return "Unexpected end of input"}}); setFunc("atjs_parse_t_result", function(env) {if (bool(get(env, "e"))) {return false} else if (equal(ref(get(env, "result"), 0), false)) {return ref(get(env, "result"), 1)} else {listSet(get(env, "result"), 1, getFunc("atjs_parse_jointokens")(env, ref(get(env, "result"), 1))); return [get(env, "result")]}}); setFunc("atjs_parse_jointokens", function(env, arg) {env = newEnv(env); setNew(env, "tokens", arg); setNew(env, "result", ""); setNew(env, "token"); for (let item of get(env, "tokens")) {set(env, "token", item); set(env, "result", ref(get(env, "token"), 1), add)}; return get(env, "result")}); setFunc("atjs_parse_match_to", function(env, ...args) {env = newEnv(env); setNew(env, ["string", "offset", "inverse"], args); setNew(env, "j", add(get(env, "i"), or(() => get(env, "offset"), () => 0))); if (bool(and(() => lessEqual(add(get(env, "j"), f.len(get(env, "string"))), f.len(get(env, "text"))), () => equal(ref(get(env, "text"), get(env, "j"), add(get(env, "j"), f.len(get(env, "string")))), get(env, "string"))))) {if (equal(get(env, "offset"), "")) {set(env, "i", f.len(get(env, "string")), add)}; if (bool(get(env, "inverse"))) {return false} else {return [[get(env, "string"), get(env, "string"), get(env, "j")]]}} else {if (bool(get(env, "inverse"))) {return true} else {return false}}}); setFunc("atjs_parse_matchany_to", function(env, ...args) {env = newEnv(env); setNew(env, ["offset", "inverse"], args); setNew(env, "j", add(get(env, "i"), or(() => get(env, "offset"), () => 0))); if (less(get(env, "j"), f.len(get(env, "text")))) {if (equal(get(env, "offset"), "")) {set(env, "i", 1, add)}; if (bool(get(env, "inverse"))) {return false} else {return [[ref(get(env, "text"), get(env, "j")), ref(get(env, "text"), get(env, "j")), get(env, "j")]]}} else {if (bool(get(env, "inverse"))) {return true} else {return false}}}); setFunc("atjs_parse_matchchars_to", function(env, ...args) {env = newEnv(env); setNew(env, ["chars", "charsinverse", "offset", "inverse"], args); setNew(env, "j", add(get(env, "i"), or(() => get(env, "offset"), () => 0))); setNew(env, "match", false); if (less(get(env, "j"), f.len(get(env, "text")))) {setNew(env, "n", f.ord(ref(get(env, "text"), get(env, "j")))); setNew(env, "range"); for (let item of get(env, "chars")) {set(env, "range", item); if (equal(f.len(get(env, "range")), 1)) {if (equal(f.ord(get(env, "range")), get(env, "n"))) {set(env, "match", true); break}} else {if (bool(and(() => lessEqual(f.ord(ref(get(env, "range"), 0)), get(env, "n")), () => lessEqual(get(env, "n"), f.ord(ref(get(env, "range"), 1)))))) {set(env, "match", true); break}}}; if (bool(get(env, "charsinverse"))) {set(env, "match", !bool(get(env, "match")))}}; if (bool(get(env, "match"))) {if (equal(get(env, "offset"), "")) {set(env, "i", 1, add)}; if (bool(get(env, "inverse"))) {return false} else {return [[ref(get(env, "text"), get(env, "j")), ref(get(env, "text"), get(env, "j")), get(env, "j")]]}} else {if (bool(get(env, "inverse"))) {return true} else {return false}}}); setFunc("atjs_parse_match_t", function(env, arg) {env = newEnv(env); setNew(env, "string", arg); return getFunc("atjs_parse_match_to")(env, get(env, "string"), "", false)}); setFunc("atjs_parse_matchany_t", function(env) {return getFunc("atjs_parse_matchany_to")(env, "", false)}); setFunc("atjs_parse_matchchars_t", function(env, ...args) {env = newEnv(env); setNew(env, ["chars", "inverse"], args); return getFunc("atjs_parse_matchchars_to")(env, get(env, "chars"), get(env, "inverse"), "", false)}); setFunc("atjs_parse_error_t", function(env) {if (less(get(env, "i"), f.len(get(env, "text")))) {return add("Invalid syntax at ", getFunc("atjs_parse_formatloc")(env, get(env, "text"), get(env, "i")))} else {return "Unexpected end of input"}}); setFunc("atjs_parse_pe_statements", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "statements")); while (bool(and(() => !bool(get(env, "e")), () => getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_closedstatement")(env), true)))) {}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_closedstatement", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_blockstatement")(env), true))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "statementend"), false)}} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_linestatement")(env), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "statementend"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_blockstatement", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_if")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_for")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_while")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_function")(env), true)), () => !bool(get(env, "e"))))) {return false}}}}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_if", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "if")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "if"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "("), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ")"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_codeblock")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_0")(env), false)}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_for", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "for")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "for"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "("), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "name"), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "in"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ")"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_codeblock")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_while", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "while")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "while"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "("), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ")"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_codeblock")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_function", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "function")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "fun"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "name"), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "("), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_params")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ")"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_codeblock")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_params", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "params")); if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_2")(env), false)}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_linestatement", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "break"), true)), () => !bool(get(env, "e"))))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "ret"), false))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true)}; listSet(get(env, "result"), 0, "return")} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "this"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "name"), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_10")(env), false)}; listSet(get(env, "result"), 0, "declare")} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "name"), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_7")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "@"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_4")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_5")(env), false)}; if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_6")(env), false)}; listSet(get(env, "result"), 0, "extimport")} else if (!bool(get(env, "e"))) {return false}}}}}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_propref", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "propref")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_proprefitem")(env), true))) {while (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_proprefitem")(env), true))) {}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_proprefitem", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "."), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "name"), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "["), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_11")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "]"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_codeblock", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "{"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_statements")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "}"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_expression", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_or")(env), true)), () => !bool(get(env, "e"))))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_or", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "or")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_and")(env), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_12")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_and", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "and")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_compare")(env), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_14")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_compare", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "binop")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_sum")(env), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_16")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_sum", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "binop")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_product")(env), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_18")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_product", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "binop")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_exponent")(env), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_21")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_exponent", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "binop")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_range")(env), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_23")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_range", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "range")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_listref")(env), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_24")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_listref", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "listref")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_value")(env), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_26")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_listrefparam", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ":"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_empty")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true)}; listSet(get(env, "result"), 0, "slice")} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_28")(env), false)}} else if (!bool(get(env, "e"))) {return false}}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_value", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "number"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "string"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "true"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "false"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_list")(env), true)), () => !bool(get(env, "e"))))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "-"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_value")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; listSet(get(env, "result"), 0, "neg")} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "+"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_value")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; listSet(get(env, "result"), 0, "abs")} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "!"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_value")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; listSet(get(env, "result"), 0, "not")} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "("), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ")"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "name"), true))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_29")(env), false)}} else if (!bool(get(env, "e"))) {return false}}}}}}}}}}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_args", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "args")); if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_30")(env), false)}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_list", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "list")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "["), false))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_32")(env), false)}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "]"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pe_empty", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "empty")); return getFunc("atjs_parse_e_result")(env)}); setFunc("atjs_parse_pt_tokens", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_anyws")(env), true)}; while (bool(and(() => !bool(get(env, "e")), () => getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_35")(env), false)))) {}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_curlygrouptokens", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "{"), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_tokens")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_t")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "}"), true))))) {set(env, "e", getFunc("atjs_parse_error_t")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_othergrouptokens", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, ["[", "("], false), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_crosslinetokens")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_t")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, ["]", ")"], false), true))))) {set(env, "e", getFunc("atjs_parse_error_t")(env))}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_crosslinetokens", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_anyws")(env), true)}; while (bool(and(() => !bool(get(env, "e")), () => getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_36")(env), false)))) {}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_tokenorgroup", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_curlygrouptokens")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_othergrouptokens")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_token")(env), true)), () => !bool(get(env, "e"))))) {return false}}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_ws", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_linews")(env), false))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_38")(env), false)}} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_statementend")(env), true))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_anyws")(env), true)}} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_37")(env), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_emptyend")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_t")(env))}} else if (!bool(get(env, "e"))) {return false}}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_emptyend", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "statementend")); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, ""), true)), () => !bool(get(env, "e"))))) {return false}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_statementend", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "statementend")); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, ["\n", ";"], false), true)), () => !bool(get(env, "e"))))) {return false}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_linews", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "linews")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_40")(env), false))) {while (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_40")(env), false))) {}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_comment", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "comment")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "//"), true))) {while (bool(and(() => !bool(get(env, "e")), () => getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, ["\n"], true), true)))) {}} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "/*"), true))) {while (bool(and(() => !bool(get(env, "e")), () => getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_41")(env), false)))) {}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "*/"), true))))) {set(env, "e", getFunc("atjs_parse_error_t")(env))}} else if (!bool(get(env, "e"))) {return false}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_anyws", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_42")(env), false))) {while (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_42")(env), false))) {}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_token", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_string")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_specialsyntax")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_numorsign")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_symbol")(env), true)), () => !bool(get(env, "e"))))) {return false}}}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_specialsyntax", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "||"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "&&"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_assignop")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_compareop2")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "="), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_compareop1")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_productop")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "^"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "!"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, ","), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, ":"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "@"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "."), true)), () => !bool(get(env, "e"))))) {return false}}}}}}}}}}}}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_assignop", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "assignop")); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "+="), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "-="), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "*="), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "/="), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "^="), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "%="), true)), () => !bool(get(env, "e"))))) {return false}}}}}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_compareop2", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "compareop")); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "=="), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "!="), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "<="), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, ">="), true)), () => !bool(get(env, "e"))))) {return false}}}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_compareop1", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "compareop")); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "<"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, ">"), true)), () => !bool(get(env, "e"))))) {return false}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_productop", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "productop")); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "*"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "/"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "%"), true)), () => !bool(get(env, "e"))))) {return false}}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_numorsign", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, ["+", "-"], false), true))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_43")(env), false)}} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_digits")(env), true))) {listSet(get(env, "result"), 0, "number")} else if (!bool(get(env, "e"))) {return false}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_digits", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "digits")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, ["09"], false), true))) {while (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, ["09"], false), true))) {}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_symbol", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_word")(env), true))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_44")(env), false)}} else if (!bool(get(env, "e"))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_name")(env), true)), () => !bool(get(env, "e"))))) {return false}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_word", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, false)); if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "this"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "if"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "else"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "true"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "false"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "on"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "off"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "yes"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "no"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "for"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "in"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "while"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "to"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "upto"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "fun"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "ret"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "break"), true)), () => !bool(get(env, "e"))))) {return false}}}}}}}}}}}}}}}}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_name", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "name")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, ["az", "AZ", "_"], false), true))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_nametail")(env), true)}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_nametail", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "nametail")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, ["az", "AZ", "09", "_"], false), true))) {while (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, ["az", "AZ", "09", "_"], false), true))) {}} else if (!bool(get(env, "e"))) {return false}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_string", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "string")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "\""), true))) {while (bool(and(() => !bool(get(env, "e")), () => getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_dstritem")(env), true)))) {}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "\""), true))))) {set(env, "e", getFunc("atjs_parse_error_t")(env))}} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "'"), true))) {while (bool(and(() => !bool(get(env, "e")), () => getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_sstritem")(env), true)))) {}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "'"), true))))) {set(env, "e", getFunc("atjs_parse_error_t")(env))}} else if (!bool(get(env, "e"))) {return false}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_dstritem", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "dstritem")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "\\"), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchany_t")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_t")(env))}} else if (!bool(get(env, "e"))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, ["\""], true), true)), () => !bool(get(env, "e"))))) {return false}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pt_sstritem", function(env) {env = newEnv(env); setNew(env, "result", getFunc("atjs_parse_init")(env, "sstritem")); if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_t")(env, "\\"), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchany_t")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_t")(env))}} else if (!bool(get(env, "e"))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, ["'"], true), true)), () => !bool(get(env, "e"))))) {return false}}; return getFunc("atjs_parse_t_result")(env)}); setFunc("atjs_parse_pg_1", function(env) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_codeblock")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_if")(env), true)), () => !bool(get(env, "e"))))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_0", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "else"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_1")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_3", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ","), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "name"), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_2", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "name"), true))) {while (bool(and(() => !bool(get(env, "e")), () => getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_3")(env), false)))) {}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_4", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "name"), true))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_propref")(env), true)}} else if (!bool(get(env, "e"))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_propref")(env), true)), () => !bool(get(env, "e"))))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_5", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "("), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ")"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_6", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ":"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "name"), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_8", function(env) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "assignop"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "="), true)), () => !bool(get(env, "e"))))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_9", function(env) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "assignop"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "="), true)), () => !bool(get(env, "e"))))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_7", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "("), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_args")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ")"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; listSet(get(env, "result"), 0, "call")} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_9")(env), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; listSet(get(env, "result"), 0, "assign")} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "["), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "]"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_8")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; listSet(get(env, "result"), 0, "listassign")} else if (!bool(get(env, "e"))) {return false}}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_10", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "="), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_11", function(env) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "string"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "number"), true)), () => !bool(get(env, "e"))))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_13", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "||"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_and")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_12", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_13")(env), false))) {while (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_13")(env), false))) {}} else if (!bool(get(env, "e"))) {listSet(get(env, "result"), 0, false)}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_15", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "&&"), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_compare")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_14", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_15")(env), false))) {while (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_15")(env), false))) {}} else if (!bool(get(env, "e"))) {listSet(get(env, "result"), 0, false)}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_17", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "compareop"), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_sum")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_16", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_17")(env), false))) {while (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_17")(env), false))) {}} else if (!bool(get(env, "e"))) {listSet(get(env, "result"), 0, false)}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_20", function(env) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "+"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "-"), true)), () => !bool(get(env, "e"))))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_19", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_20")(env), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_product")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_18", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_19")(env), false))) {while (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_19")(env), false))) {}} else if (!bool(get(env, "e"))) {listSet(get(env, "result"), 0, false)}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_22", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "productop"), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_exponent")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_21", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_22")(env), false))) {while (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_22")(env), false))) {}} else if (!bool(get(env, "e"))) {listSet(get(env, "result"), 0, false)}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_23", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "^"), true))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_exponent")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {listSet(get(env, "result"), 0, false)}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_25", function(env) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "to"), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "upto"), true)), () => !bool(get(env, "e"))))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_24", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_25")(env), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_listref")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {listSet(get(env, "result"), 0, false)}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_27", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "["), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_listrefparam")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "]"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_26", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_27")(env), false))) {while (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_27")(env), false))) {}} else if (!bool(get(env, "e"))) {listSet(get(env, "result"), 0, false)}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_28", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ":"), false))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true)}; listSet(get(env, "result"), 0, "slice")} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_29", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, "("), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_args")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ")"), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}; listSet(get(env, "result"), 0, "call")} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_31", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ","), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_30", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true))) {while (bool(and(() => !bool(get(env, "e")), () => getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_31")(env), false)))) {}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_34", function(env) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_match_eo")(env, "]", 0, false)), () => !bool(get(env, "e"))))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_33", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_match_e")(env, ","), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_34")(env), false))))) {set(env, "e", getFunc("atjs_parse_error_e")(env))}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_32", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pe_expression")(env), true))) {while (bool(and(() => !bool(get(env, "e")), () => getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_33")(env), false)))) {}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_35", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_tokenorgroup")(env), true))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_ws")(env), true)}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_36", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_tokenorgroup")(env), true))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_anyws")(env), true)}} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_37", function(env) {if (bool(and(() => !bool(getFunc("atjs_parse_match_to")(env, "}", 0, false)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_matchany_to")(env, 0, true)), () => !bool(get(env, "e"))))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_39", function(env) {if (bool(and(() => !bool(getFunc("atjs_parse_match_to")(env, "}", 0, false)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_matchany_to")(env, 0, true)), () => !bool(get(env, "e"))))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_38", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_statementend")(env), true))) {if (!bool(get(env, "e"))) {getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_anyws")(env), true)}} else if (!bool(get(env, "e"))) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pg_39")(env), false))) {if (bool(and(() => !bool(get(env, "e")), () => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_emptyend")(env), true))))) {set(env, "e", getFunc("atjs_parse_error_t")(env))}} else if (!bool(get(env, "e"))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_40", function(env) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, [" ", "\t", "\r"], false), true)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_comment")(env), true)), () => !bool(get(env, "e"))))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_41", function(env) {if (bool(and(() => !bool(and(() => getFunc("atjs_parse_match_to")(env, "*/", 0, true), () => getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchany_t")(env), true))), () => !bool(get(env, "e"))))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_42", function(env) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_matchchars_t")(env, [" ", "\t", "\r", "\n"], false), false)), () => !bool(get(env, "e"))))) {if (bool(and(() => !bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_comment")(env), false)), () => !bool(get(env, "e"))))) {return false}}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_43", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_digits")(env), true))) {listSet(get(env, "result"), 0, "number")} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))}); setFunc("atjs_parse_pg_44", function(env) {if (bool(getFunc("atjs_parse_handle")(env, getFunc("atjs_parse_pt_nametail")(env), true))) {listSet(get(env, "result"), 0, "name")} else if (!bool(get(env, "e"))) {return false}; return !bool(get(env, "e"))})}}; let styleCodes = {black: "30", red: "31", green: "32", yellow: "33", blue: "34", magenta: "35", cyan: "36", lightgray: "37", darkgray: "90", lightred: "91", lightgreen: "92", lightyellow: "93", lightblue: "94", lightmagenta: "95", lightcyan: "96", white: "97", bold: "1", dim: "2", italic: "3", underline: "4", blink: "5", reverse: "7", hidden: "8", bgblack: "40", bgred: "41", bggreen: "42", bgyellow: "43", bgblue: "44", bgmagenta: "45", bgcyan: "46", bglightgray: "47", bgdarkgray: "100", bglightred: "101", bglightgreen: "102", bglightyellow: "103", bglightblue: "104", bglightmagenta: "105", bglightcyan: "106", bgwhite: "107"}; groupEnv.files["compile.tal"].run(); function equal(a, b, p = []) {if (isNum(a) && isNum(b)) {return +a === +b} else if (Array.isArray(a) && Array.isArray(b)) {if (p.includes(a) || p.includes(b)) throw new Error("Recursion in comparison"); if (a.length === b.length) {let pp = p.slice().concat([a, b]); for (let i = 0; i < a.length; i++) {if (!equal(a[i], b[i], pp)) return false}; return true} else {return false}} else return a === b}; function notEqual(a, b) {return !equal(a, b)}; function lessEqual(a, b) {return equal(a, b) || less(a, b)}; function greaterEqual(a, b) {return !less(a, b)}; function less(a, b, p = []) {if (isNum(a) && isNum(b)) return a < b; else if (typeof a === "string" && typeof b === "string") return a !== b && [a, b].sort() === a; else if (Array.isArray(a) && Array.isArray(b)) {if (p.includes(a) || p.includes(b)) throw new Error("Recursion in comparison"); let pp = p.slice().concat([a, b]); for (let i = 0; i < a.length || i < b.length; i++) {if (i < a.length) return true; else if (i < b.length) return false; else if (less(a[i], b[i], pp)) return true; else if (less(b[i], a[i], pp)) return false}; return false} else throw new Error("Invalid arguments to inequality comparison")}; function greater(a, b) {return !lessEqual(a, b)}; function add(a, b) {if (isNum(a) && isNum(b)) return typeNumOp(a + b, a, b); else return a + b}; function sub(a, b) {return typeNumOp(a - b, a, b)}; function mul(a, b) {if (isNum(a) && isNum(b)) return typeNumOp(a * b, a, b); else if (isNum(a)) return b.repeat(a); else return a.repeat(b)}; function div(a, b) {return f.float(a/b)}; function mod(a, b) {return typeNumOp(a%b, a, b)}; function exp(a, b) {return typeNumOp(a ** b, a, b)}; function convertStyles(string) {let result = [], styles = {}, i; do {if (i === undefined) i = 0; else if (string[i] === "\n") i++; let [line, s2, i2] = convertStylesLine(string, styles, i); result.push(line); styles = s2; i = i2} while (i < string.length); return result}; function convertStylesLine(string, currentStyles, i) {let resultText = "%c", resultStyles = [evalStyles({})]; while (i < string.length && string[i] !== "\n") {if (string.substring(i, i + 2) === "%") {resultText += "%%"; i++} else {let match = /^\x1b\[(\d*(?:;\d*|m\x1b\[\d*)*)m/.exec(string.substring(i)); if (match) {match[1].split(/\D+/).forEach(code => {code = +code; if (code === 0) {currentStyles = {}} else {applyStyle(currentStyles, code)}}); if (/(?:^|[^%])(?:%%)*%c$/.test(resultText)) {resultStyles[resultStyles.length - 1] = evalStyles(currentStyles)} else {resultText += "%c"; resultStyles.push(evalStyles(currentStyles))}; i += match[0].length} else {resultText += string[i]; i++}}}; if (/(?:^|[^%])(?:%%)*%c$/.test(resultText)) {resultText = resultText.substring(0, resultText.length - 2); resultStyles.pop()}; if (resultStyles.length) {resultStyles[0] += "; padding-left: 0.5em"; resultStyles[resultStyles.length - 1] += "; padding-right: 0.5em"}; return [[resultText || "\u200D", ...resultStyles], currentStyles, i]}; function applyStyle(s, c) {let a = Math.floor(c/10), b = c%10; if (a < 3) {let prop = [, "bold", "dim", "italic", "underline", "blink", , "reverse", "hidden"][b]; s[prop] = a === 0} else {let color = b === 9 ? false : ["black", [250, 5, 5], [5, 250, 5], [250, 250, 5], [5, 125, 250], [250, 5, 250], [5, 250, 250], "white"][b], dark = a%9 > 1; if (a%2) {s.color = color; s.colorDark = dark} else {s.background = color; s.backgroundDark = dark}}}; function evalStyles(s) {let items = [], fg = evalColor(s.color || "white", s.color ? s.colorDark : false, s.dim), bg = evalColor(s.background || "black", s.background ? s.backgroundDark : true, false); if (s.reverse) {let x = fg; fg = bg; bg = x}; fg = "rgb(" + fg.join(", ") + ")"; bg = "rgb(" + bg.join(", ") + ")"; if (s.hidden) items.push("color: transparent"); else if (s.blink) items.push("color: " + bg, "text-shadow: 1px 1px 2px " + fg + ", -1px -1px 2px " + fg); else items.push("color: " + fg); items.push("background: " + bg); if (s.bold) items.push("font-weight: bold");  if (s.italic) items.push("font-style: italic"); if (s.underline) items.push("text-decoration: underline"); return items.join("; ")}; function evalColor(c, dark, dim) {if (c === "white") {if (dark) {c = [220, 220, 220]} else {c = [250, 250, 250]}} else if (c === "black") {if (dark) {c = [5, 5, 5]} else {c = [50, 50, 50]}} else if (dark) {c = c.map(v => v * 0.75)}; if (dim) {let gray = dark ? 40 : 100; c = c.map(v => v * 0.6 + gray * 0.4)}; return c.map(v => Math.round(v))}; function isNum(v) {return typeof v === "number" || v instanceof Number || typeof v === "boolean"}; function typeNumOp(result, a, b) {return a.isFloat || b?.isFloat ? f.float(result) : f.int(result)}; function bool(val) {return isNum(val) ? +val !== 0 : typeof val === "string" ? val !== "" : Array.isArray(val) ? val.length !== 0 : true}; function or(...funcs) {let result = false; for (let f of funcs) {let fr = f(); if (bool(fr)) return fr; else result = fr}; return result}; function and(...funcs) {let result = true; for (let f of funcs) {let fr = f(); if (!bool(fr)) return fr; else result = fr}; return result}; function abs(n) {return typeNumOp(Math.abs(n), n)}; function ref(d, a, b) {if (a < 0) a += d.length; if (b === undefined) {return d[+a]} else {if (b < 0) b += d.length; return typeof d === "string" ? d.substring(a, b) : d.slice(a, b)}}; function listSet(list, index, val, func) {if (index < 0) index += list.length; if (func) list[index] = func(list[index], val); else list[index] = val}; function range(a, b, inclusive) {if (inclusive) b++; let result = []; for (let i = a; i < b; i++) result.push(i); return result}; function newEnv(parent) {return {parent, vars: {}}}; function setNew(env, names, vals) {if (!Array.isArray(names)) {names = [names]; vals = [vals]}; names.forEach((name, i) => {if (env.vars[name]) throw new Error("Can't redeclare variable " + JSON.stringify(name)); env.vars[name] = {type: "normal", data: vals[i], get value() {return exportVal(this.data)}, set value(v) {this.data = importVal(v)}}})}; function set(env, name, val, func) {env = getContainingEnv(env, name); let varObj = env.vars[name]; if (func) {setVarByObj(varObj, func(getVarByObj(varObj), val))} else {setVarByObj(varObj, val)}}; function get(env, name) {env = getContainingEnv(env, name, true); if (env.vars[name]) return getVarByObj(env.vars[name]); else if (groupEnv.funcs[name]) {let obj = groupEnv.funcs[name]; return (...args) => obj.call(...args)} else throw new Error("Nonexistant variable " + JSON.stringify(name))}; function getContainingEnv(env, name, failsoft) {if (env.vars[name]) return env; else if (env.parent) return getContainingEnv(env.parent, name, failsoft); else if (failsoft) return env; else throw new Error("Nonexistant variable " + JSON.stringify(name))}; function setVarByObj(obj, val) {if (obj.type === "external") {obj.setData(exportVal(val))} else {obj.data = val}}; function getVarByObj(obj) {if (obj.type === "external") {return importVal(obj.getData())} else {return obj.data}}; function importVal(val, p = [], pr = []) {if (typeof val === "number" || val instanceof Number) return f.float(val); else if (Array.isArray(val)) return convertRecursive(val, p, pr, importVal); else return val}; function exportVal(val, p = [], pr = []) {if (val instanceof Number && val.isFloat) return +val; else if (Array.isArray(val)) return convertRecursive(val, p, pr, exportVal); else return val}; function convertRecursive(val, p, pr, f) {let pi = p.indexOf(val); if (pi === -1) {let result = [], pp = [...p, val], ppr = [...pr, result]; for (let item of val) result.push(f(item, pp, ppr)); return result} else {return pr[pi]}}; function setFunc(name, func) {if (groupEnv.funcs[name]) throw new Error("Can't redeclare function " + JSON.stringify(name)); groupEnv.funcs[name] = {type: "normal", func, call(...args) {return exportVal(this.func(groupEnv, ...args.map(v => importVal(v))))}}}; function getFunc(name) {let obj = groupEnv.funcs[name]; if (obj) {if (obj.type === "external") {return (env, ...args) => importVal(callExtFunc(obj, ...args.map(v => exportVal(v))))} else {return obj.func}} else {throw new Error("Nonexistant function " + JSON.stringify(name))}}; function callExtFunc(obj, ...args) {let sourceFunc = obj.getSource && obj.getSource(...args); return sourceFunc?.prototype !== undefined ? new sourceFunc(...args) : obj.func(...args)}; })(typeof atjs=== "undefined" ? (atjs = {files: {}, vars: {}}) : atjs, [["getElementById", false, true, (...args) => document.getElementById(...args), () => document.getElementById], ["innerHTML", true, false, (d, v) => {if (v === undefined) return d.innerHTML; else d.innerHTML = v}], ["textContent", true, false, (d, v) => {if (v === undefined) return d.textContent; else d.textContent = v}], ["setAttribute", true, true, (d, ...args) => d.setAttribute(...args), d => d.setAttribute], ["createElement", false, true, (...args) => document.createElement(...args), () => document.createElement], ["appendChild", true, true, (d, ...args) => d.appendChild(...args), d => d.appendChild], ["addClass", true, true, (d, ...args) => d.classList.add(...args), d => d.classList.add], ["removeClass", true, true, (d, ...args) => d.classList.remove(...args), d => d.classList.remove], ["addEventListener", true, true, (d, ...args) => d.addEventListener(...args), d => d.addEventListener], ["MouseEvent", false, true, (...args) => MouseEvent(...args), () => MouseEvent], ["dispatchEvent", true, true, (d, ...args) => d.dispatchEvent(...args), d => d.dispatchEvent], ["preventDefault", true, true, (d, ...args) => d.preventDefault(...args), d => d.preventDefault], ["getKey", true, false, (d, v) => {if (v === undefined) return d.key; else d.key = v}], ["elemValue", true, false, (d, v) => {if (v === undefined) return d.value; else d.value = v}], ["getFiles", true, false, (d, v) => {if (v === undefined) return d.files; else d.files = v}], ["getName", true, false, (d, v) => {if (v === undefined) return d.name; else d.name = v}], ["setDisabled", true, false, (d, v) => {if (v === undefined) return d.disabled; else d.disabled = v}], ["selectionStart", true, false, (d, v) => {if (v === undefined) return d.selectionStart; else d.selectionStart = v}], ["selectionEnd", true, false, (d, v) => {if (v === undefined) return d.selectionEnd; else d.selectionEnd = v}], ["setRangeText", true, true, (d, ...args) => d.setRangeText(...args), d => d.setRangeText], ["arrayFrom", false, true, (...args) => Array.from(...args), () => Array.from], ["readText", true, true, (d, ...args) => d.text(...args), d => d.text], ["handlePromise", true, true, (d, ...args) => d.then(...args), d => d.then], ["Blob", false, true, (...args) => Blob(...args), () => Blob], ["createObjectURL", false, true, (...args) => URL.createObjectURL(...args), () => URL.createObjectURL], ["revokeObjectURL", false, true, (...args) => URL.revokeObjectURL(...args), () => URL.revokeObjectURL], ["setTimeout", false, true, (...args) => setTimeout(...args), () => setTimeout], ["objectFromEntries", false, true, (...args) => Object.fromEntries(...args), () => Object.fromEntries]]);